/* eslint-disable */

/**
 * Generated by Verge3D Puzzles v.4.6.0
 * Wed, 18 Dec 2024 03:28:00 GMT
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */
function createPL(v3d = window.v3d) {

// global variables used in the init tab
const _initGlob = {
    percentage: 0,
    output: {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        },
    },
};


// global variables/constants used by puzzles' functions
var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.openedFileMeta = {};
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};
_pGlob.customEvents = new v3d.EventDispatcher();
_pGlob.eventListeners = [];
_pGlob.htmlElements = new Set();
_pGlob.materialsCache = new Map();

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster(); // always check visibility

const createPzLib = ({ v3d=null, appInstance=null }) => {
    function getElement(id, isParent=false) {
        let elem;
        if (Array.isArray(id) && id[0] === 'CONTAINER') {
            if (appInstance !== null) {
                elem = appInstance.container;
            } else if (typeof _initGlob !== 'undefined') {
                // if we are on the initialization stage, we still can have access
                // to the container element
                const contId = _initGlob.container;
                elem = isParent ? parent.document.getElementById(contId)
                        : document.getElementById(contId);
            }
        } else if (Array.isArray(id) && id[0] === 'WINDOW') {
            elem = isParent ? parent : window;
        } else if (Array.isArray(id) && id[0] === 'DOCUMENT') {
            elem = isParent ? parent.document : document;
        } else if (Array.isArray(id) && id[0] === 'BODY') {
            elem = isParent ? parent.document.body : document.body;
        } else if (Array.isArray(id) && id[0] === 'QUERYSELECTOR') {
            elem = isParent ? parent.document.querySelector(id)
                    : document.querySelector(id);
        } else {
            elem = isParent ? parent.document.getElementById(id)
                    : document.getElementById(id);
        }
        return elem;
    }
        
    function getElements(ids, isParent=false) {
        const elems = [];
        if (Array.isArray(ids) && ids[0] !== 'CONTAINER' && ids[0] !== 'WINDOW'
                && ids[0] !== 'DOCUMENT' && ids[0] !== 'BODY'
                && ids[0] !== 'QUERYSELECTOR') {
            for (let i = 0; i < ids.length; i++) {
                elems.push(getElement(ids[i], isParent));
            }
        } else {
            elems.push(getElement(ids, isParent));
        }
        return elems;
    }
        
    function isObjectWorthProcessing(obj) {
        return obj.type !== 'AmbientLight' && obj.name !== '' &&
                !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
                !obj.isAuxClippingMesh;
    }
        
    function getObjectByName(objName) {
        let objFound = null;
    
        const pGlobAvailable = _pGlob !== undefined;
        if (pGlobAvailable && objName in _pGlob.objCache) {
            objFound = _pGlob.objCache[objName] || null;
        }
    
        if (objFound && objFound.name === objName) {
            return objFound;
        }
    
        if (appInstance.scene) {
            appInstance.scene.traverse(obj => {
                if (!objFound && isObjectWorthProcessing(obj) && (obj.name === objName)) {
                    objFound = obj;
                    if (pGlobAvailable) {
                        _pGlob.objCache[objName] = objFound;
                    }
                }
            });
        }
        return objFound;
    }
        
    function getObjectNamesByGroupName(groupName) {
        const objNameList = [];
        appInstance.scene.traverse(obj => {
            if (isObjectWorthProcessing(obj)) {
                const objGroupNames = obj.groupNames;
                if (!objGroupNames) {
                    return;
                }
    
                for (let i = 0; i < objGroupNames.length; i++) {
                    const objGroupName = objGroupNames[i];
                    if (objGroupName === groupName) {
                        objNameList.push(obj.name);
                    }
                }
            }
        });
        return objNameList;
    }
        
    function getAllObjectNames() {
        const objNameList = [];
        appInstance.scene.traverse(obj => {
            if (isObjectWorthProcessing(obj)) {
                objNameList.push(obj.name);
            }
        });
        return objNameList;
    }
        
    function retrieveObjectNamesAccum(currObjNames, namesAccum) {
        if (typeof currObjNames === 'string') {
            namesAccum.push(currObjNames);
        } else if (Array.isArray(currObjNames) && currObjNames[0] === 'GROUP') {
            const newObjNames = getObjectNamesByGroupName(currObjNames[1]);
            for (let i = 0; i < newObjNames.length; i++) {
                namesAccum.push(newObjNames[i]);
            }
        } else if (Array.isArray(currObjNames) && currObjNames[0] === 'ALL_OBJECTS') {
            const newObjNames = getAllObjectNames();
            for (let i = 0; i < newObjNames.length; i++) {
                namesAccum.push(newObjNames[i]);
            }
        } else if (Array.isArray(currObjNames)) {
            for (let i = 0; i < currObjNames.length; i++) {
                retrieveObjectNamesAccum(currObjNames[i], namesAccum);
            }
        }
    }
        
    function retrieveObjectNames(objNames) {
        const accum = [];
        retrieveObjectNamesAccum(objNames, accum);
        return accum.filter(name => name !== '');
    }
        
    function isMeshObject(obj) {
        if (obj.isMesh) {
            return true;
        }
    
        for (let i = 0; i < obj.children.length; i++) {
            const child = obj.children[i];
            if (child.isMesh && child.isMaterialGeneratedMesh) {
                return true;
            }
        }
    
        return false;
    }
        
    function isDataUrl(obj) {
        // NOTE: checking with dataUrlRe is slow
        return (typeof obj === 'string' && obj.indexOf('data:') === 0);
    }
        
    const dataUrlRe = /^data:(.+\/.+);base64,(.*)$/;
        
    function decodeUnicodeStrFromBase64(str) {
        return decodeURIComponent(atob(str).split('').map(c => {
            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        }).join(''));
    }
        
    function extractDataUrlData(str) {
        const matches = str.match(dataUrlRe);
        return decodeUnicodeStrFromBase64(matches[2]);
    }
        
    function areListenersSame(target0, type0, listener0, optionsOrUseCapture0,
            target1, type1, listener1, optionsOrUseCapture1) {
        const capture0 = Boolean(optionsOrUseCapture0 instanceof Object
                ? optionsOrUseCapture0.capture : optionsOrUseCapture0);
        const capture1 = Boolean(optionsOrUseCapture1 instanceof Object
                ? optionsOrUseCapture1.capture : optionsOrUseCapture1);
        return target0 === target1 && type0 === type1 && listener0 === listener1
                && capture0 === capture1;
    }
        
    function bindListener(target, type, listener, optionsOrUseCapture) {
        const alreadyExists = _pGlob.eventListeners.some(elem => {
            return areListenersSame(elem.target, elem.type, elem.listener,
                    elem.optionsOrUseCapture, target, type, listener,
                    optionsOrUseCapture);
        });
    
        if (!alreadyExists) {
            target.addEventListener(type, listener, optionsOrUseCapture);
            _pGlob.eventListeners.push({ target, type, listener,
                    optionsOrUseCapture });
        }
    }
        
    function getSceneAnimFrameRate(scene) {
        if (scene && 'animFrameRate' in scene.userData) {
            return scene.userData.animFrameRate;
        }
        return 24;
    }
        
    function getSceneByAction(action) {
        const root = action.getRoot();
        let scene = root.type === 'Scene' ? root : null;
        root.traverseAncestors(ancObj => {
            if (ancObj.type === 'Scene') {
                scene = ancObj;
            }
        });
        return scene;
    }
        
    function generateUniqueName(name, isUniqueCb) {
        let uniqueName = name;
    
        if (isUniqueCb !== undefined) {
            while (!isUniqueCb(uniqueName)) {
                const r = uniqueName.match(/^(.*?)(\d+)$/);
                if (!r) {
                    uniqueName += '2';
                } else {
                    uniqueName = r[1] + (Number.parseInt(r[2], 10) + 1);
                }
            }
        }
    
        return uniqueName;
    }
        
    function generateUniqueObjectName(name) {
        return generateUniqueName(name, name => !Boolean(getObjectByName(name)));
    }
        
    function getMaterialEditableValues(matName) {
        const mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
        if (!mat) {
            return [];
        }
    
        if (mat.isMeshNodeMaterial) {
            return Object.keys(mat.nodeValueMap);
        } else if (mat.isMeshStandardMaterial) {
            return ['metalness', 'roughness', 'bumpScale', 'emissiveIntensity',
                    'envMapIntensity'];
        } else {
            return [];
        }
    }
        
    function transformCoordsSpace(coords, spaceFrom, spaceTo, noSignChange=false) {
    
        if (spaceFrom === spaceTo) {
            return coords;
        }
    
        const y = coords.y;
        const z = coords.z;
    
        if (spaceFrom === 'Z_UP_RIGHT' && spaceTo === 'Y_UP_RIGHT') {
            coords.y = z;
            coords.z = noSignChange ? y : -y;
        } else if (spaceFrom === 'Y_UP_RIGHT' && spaceTo === 'Z_UP_RIGHT') {
            coords.y = noSignChange ? z : -z;
            coords.z = y;
        } else {
            console.error('transformCoordsSpace: Unsupported coordinate space');
        }
    
        return coords;
    }
        
    function getSceneCoordSystem() {
        const scene = appInstance.scene;
        if (scene && 'coordSystem' in scene.userData) {
            return scene.userData.coordSystem;
        }
    
        return 'Y_UP_RIGHT';
    }
        
    function getObjectName(obj) {
        // auto-generated from a multi-material object, use parent name instead
        if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
            return obj.parent.name;
        } else {
            return obj.name;
        }
    }
        
    function initObjectPicking(callback, eventType, mouseDownUseTouchStart=false,
            allowedMouseButtons=null) {
    
        const elem = appInstance.renderer.domElement;
        bindListener(elem, eventType, pickListener);
    
        if (eventType === 'mousedown') {
    
            const touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
            bindListener(elem, touchEventName, pickListener);
    
        } else if (eventType === 'dblclick') {
    
            let prevTapTime = 0;
    
            function doubleTapCallback(event) {
                const now = new Date().getTime();
                const timesince = now - prevTapTime;
    
                if (timesince < 600 && timesince > 0) {
                    pickListener(event);
                    prevTapTime = 0;
                    return;
                }
    
                prevTapTime = new Date().getTime();
            }
    
            const touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
            bindListener(elem, touchEventName, doubleTapCallback);
        }
    
        const raycaster = new v3d.Raycaster();
    
        function pickListener(event) {
    
            // to handle unload in loadScene puzzle
            if (!appInstance.getCamera()) {
                return;
            }
    
            event.preventDefault();
    
            let xNorm = 0;
            let yNorm = 0;
            if (event instanceof MouseEvent) {
                if (allowedMouseButtons !== null && allowedMouseButtons.indexOf(event.button) === -1) {
                    return;
                }
                xNorm = event.offsetX / elem.clientWidth;
                yNorm = event.offsetY / elem.clientHeight;
            } else if (event instanceof TouchEvent) {
                const rect = elem.getBoundingClientRect();
                xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
                yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
            }
    
            _pGlob.screenCoords.x = xNorm * 2 - 1;
            _pGlob.screenCoords.y = -yNorm * 2 + 1;
            raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
    
            const objList = [];
            appInstance.scene.traverse(obj => objList.push(obj));
    
            const intersects = raycaster.intersectObjects(objList, false);
            callback(intersects, event);
        }
    }
        
    function isObjectAmongObjects(objNameToCheck, objNames) {
        if (!objNameToCheck) {
            return false;
        }
    
        for (let i = 0; i < objNames.length; i++) {
            if (objNameToCheck === objNames[i]) {
                return true;
            } else {
                // also check children which are auto-generated for multi-material objects
                const obj = getObjectByName(objNames[i]);
                if (obj && obj.type === 'Group') {
                    for (let j = 0; j < obj.children.length; j++) {
                        if (objNameToCheck === obj.children[j].name) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    return {
        getElements, getObjectByName, retrieveObjectNames, isMeshObject,
        isObjectWorthProcessing, isDataUrl, extractDataUrlData, bindListener,
        getSceneAnimFrameRate, getSceneByAction, generateUniqueObjectName, getMaterialEditableValues,
        transformCoordsSpace, getSceneCoordSystem, getObjectName, initObjectPicking,
        isObjectAmongObjects, getElement,
    };
};

var PL = {};



// backward compatibility
if (v3d[Symbol.toStringTag] !== 'Module') {
    v3d.PL = v3d.puzzles = PL;
}

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    const PzLib = createPzLib({ v3d });

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    this.procedures["reOrientation"] = reOrientation;

    var PROC = {
    "reOrientation": reOrientation,
};

var VARS = Object.defineProperties({}, {
    'status': { get: function() { return status2; }, set: function(val) { status2 = val; } },
    'license': { get: function() { return license; }, set: function(val) { license = val; } },
});

var status2, license;

// loadFile puzzle
_pGlob.loadedFiles = {};

async function loadFile(url, onceReadyCb, onErrorCb, caching) {
    const files = _pGlob.loadedFiles;

    try {
        if (caching && url in files) {
            _pGlob.loadedFile = files[url];
            onceReadyCb();
            return;
        }

        const options = {};
        if (!caching)
            options.headers = { 'Cache-Control': 'no-cache' };

        const response = await fetch(url, options);
        if (!response.ok)
            throw new Error(response.status + ' network error');

        if (response.headers.get('Content-Type').startsWith('application/json'))
            _pGlob.loadedFile = await response.json();
        else
            _pGlob.loadedFile = await response.text();

        if (caching)
            files[url] = _pGlob.loadedFile;

        onceReadyCb();

    } catch (error) {
        console.error('puzzle load file:', error.message);
        _pGlob.loadedFile = '';
        onErrorCb();
    }
}

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = PzLib.getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}

// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}

// Describe this function...
function reOrientation() {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('document.getElementById("landscape")' + '\n' +
  '    .getElementsByTagName("div")[0].style.paddingTop = ((window.innerHeight / 2)-(136/2)) + "px";' + '\n' +
  '' + '\n' +
  'if (/ipad|tablet/i.test(navigator.userAgent)) {' + '\n' +
  '    console.log("tablet",navigator.userAgent);' + '\n' +
  '    //screen.orientation.lock("landscape-primary");' + '\n' +
  '    ' + '\n' +
  '    if(window.innerHeight > window.innerWidth){' + '\n' +
  '        console.log("portrait mode");' + '\n' +
  '        document.getElementById("landscape").style.display = "block";' + '\n' +
  '        ' + '\n' +
  '    } else {' + '\n' +
  '        console.log("landscape mode");' + '\n' +
  '        document.getElementById("landscape").style.display = "none";' + '\n' +
  '        var side = document.getElementById("v3d-container");' + '\n' +
  '        side.style.top = 0;' + '\n' +
  '        side.style.left = 0' + '\n' +
  '        ' + '\n' +
  '        var table_head = document.getElementById("header");' + '\n' +
  '        var table_body = document.getElementById("table-body");' + '\n' +
  '        ' + '\n' +
  '        document.getElementById("slide-open").style.display = "none";' + '\n' +
  '        side.style.left = "-18%";' + '\n' +
  '    }' + '\n' +
  '    ' + '\n' +
  '} else if (/mobile/i.test(navigator.userAgent)) {' + '\n' +
  '    console.log("mobile",navigator.userAgent);' + '\n' +
  '    ' + '\n' +
  '    if(window.innerHeight > window.innerWidth){' + '\n' +
  '        console.log("portrait mode");' + '\n' +
  '        document.getElementById("landscape").style.display = "none";' + '\n' +
  '        var side = document.getElementById("v3d-container");' + '\n' +
  '        side.style.top = 0;' + '\n' +
  '        side.style.left = 0' + '\n' +
  '        ' + '\n' +
  '        var table_head = document.getElementById("header");' + '\n' +
  '        var table_body = document.getElementById("table-body");' + '\n' +
  '        ' + '\n' +
  '        ' + '\n' +
  '    } else {' + '\n' +
  '        console.log("landscape mode");' + '\n' +
  '        document.getElementById("landscape").style.display = "block";' + '\n' +
  '    }' + '\n' +
  '}')))(appInstance, v3d, PL, VARS, PROC);

}



// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = true;
_initGlob.output.initOptions.useCompAssets = true;
_initGlob.output.initOptions.useFullscreen = false;


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {
  status2 = 0;

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('/**' + '\n' +
  ' * Author:    Von Simmons' + '\n' +
  ' * Created:   9.3.2024' + '\n' +
  ' * Purpose:   Webcode for MLPV by Checkpoint 3' + '\n' +
  ' * (c) Copyright by Checkpoint 3 LLC.' + '\n' +
  ' **/' + '\n' +
  '' + '\n' +
  'console.log(\'started loading!\');' + '\n' +
  '' + '\n' +
  'var startpage = document.getElementById("start-page");' + '\n' +
  'var startbtn = document.getElementById("go-start");' + '\n' +
  'var preloader = document.getElementById("preloader");' + '\n' +
  'var loader = document.getElementsByClassName("loader-wrapper")[0];' + '\n' +
  'var clipper = preloader.getElementsByClassName("clipper")[0];' + '\n' +
  'var mobile_menu = document.getElementById("menu-btn");' + '\n' +
  'var nav = document.getElementsByClassName("navbar2_component")[0];' + '\n' +
  '' + '\n' +
  'mobile_menu.style.display = "none";' + '\n' +
  'startbtn.style.display = "none";' + '\n' +
  'loader.style.display = "flex";' + '\n' +
  '' + '\n' +
  '//puzzles.procedures["reOrientation"]();' + '\n' +
  '' + '\n' +
  '// Skip preloading for puzzles.' + '\n' +
  'var $_GET = {};' + '\n' +
  'if(document.location.toString().indexOf(\'?\') !== -1) {' + '\n' +
  '    var query = document.location' + '\n' +
  '                   .toString()' + '\n' +
  '                   // get the query string' + '\n' +
  '                   .replace(/^.*?\\?/, \'\')' + '\n' +
  '                   // and remove any existing hash string (thanks, @vrijdenker)' + '\n' +
  '                   .replace(/#.*$/, \'\')' + '\n' +
  '                   .split(\'&\');' + '\n' +
  '' + '\n' +
  '    for(var i=0, l=query.length; i<l; i++) {' + '\n' +
  '       var aux = decodeURIComponent(query[i]).split(\'=\');' + '\n' +
  '       $_GET[aux[0]] = aux[1];' + '\n' +
  '    }' + '\n' +
  '}' + '\n' +
  'if($_GET[\'logic\'] !== undefined && $_GET[\'logic\'] == "visual_logic.xml")' + '\n' +
  '    preloader.style.display = "none";' + '\n' +
  '    ' + '\n' +
  'if(document.body.clientWidth <= 767)' + '\n' +
  '    nav.style.display = "none";' + '\n' +
  '' + '\n' +
  'startbtn.addEventListener("click",function(event)' + '\n' +
  '{' + '\n' +
  '    var status = parseInt(VARS["status"]);' + '\n' +
  '    //console.log(status);' + '\n' +
  '    //startpage.style.display = "none";' + '\n' +
  '    if(status >= 100) {' + '\n' +
  '        //preloader.style.display = "flex";' + '\n' +
  '        preloader.style.display = "none";' + '\n' +
  '        nav.style.display = "flex";' + '\n' +
  '        ' + '\n' +
  '        //if(document.body.clientWidth <= 767)' + '\n' +
  '            //mobile_menu.style.display = "flex";' + '\n' +
  '        /*' + '\n' +
  '        clipper.style.width = "0px";' + '\n' +
  '        var x = -5;' + '\n' +
  '        var load = setInterval(function(){' + '\n' +
  '            var progress = 289-289/(1+Math.exp(x));' + '\n' +
  '            if(progress/289 >= 1) {' + '\n' +
  '                clearInterval(load);' + '\n' +
  '                //preloader.style.display = "none";' + '\n' +
  '            } else {' + '\n' +
  '                clipper.style.width = progress + "px";' + '\n' +
  '                x+=0.24;' + '\n' +
  '            }' + '\n' +
  '        },10);' + '\n' +
  '        */' + '\n' +
  '    }' + '\n' +
  '});')))(appInstance, v3d, PL, VARS, PROC);

  loadFile('9X19Par_Spackled.ktx2', function() {
    license = _pGlob.loadedFile;

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('var text = VARS["license"];' + '\n' +
    '' + '\n' +
    'var str = text.substring(' + '\n' +
    '    text.indexOf("{[{")+4,' + '\n' +
    '    text.indexOf("}]}")-1' + '\n' +
    ').split(" ");' + '\n' +
    'var host = window.location.hostname;' + '\n' +
    'var domain = str[0];' + '\n' +
    'var ver = str[1];' + '\n' +
    'var exp = str[2];' + '\n' +
    'var limits = str[3].substring(1,str[3].length-1).split(",");' + '\n' +
    'for(var i=0;i<limits.length;i++)' + '\n' +
    '    limits[i] = parseInt(limits[i]);' + '\n' +
    '' + '\n' +
    'var msg = "Checkpoint 3 MLPV License\\nMatch:"+(domain==host)+' + '\n' +
    '    "\\nVersion:"+ver+"\\nExpiration:"+exp+"\\nLimits:"+limits;' + '\n' +
    '' + '\n' +
    'var valid = domain == host;' + '\n' +
    '' + '\n' +
    'v3d.cp3license = {' + '\n' +
    '    "domain": domain,' + '\n' +
    '    "version": ver,' + '\n' +
    '    "expiration": exp,' + '\n' +
    '    "limits": limits,' + '\n' +
    '    "message": msg' + '\n' +
    '}' + '\n' +
    '' + '\n' +
    'var exp_year = parseInt(exp.substring(0,4));' + '\n' +
    'var exp_month = parseInt(exp.substring(4,6));' + '\n' +
    'var exp_day = parseInt(exp.substring(6,8));' + '\n' +
    'var exp_str = exp_month + "/" + exp_day + "/" + exp_year;' + '\n' +
    '' + '\n' +
    'var currentdate = new Date(); ' + '\n' +
    'var datetime =  currentdate.getFullYear() + "-"' + '\n' +
    '                + (currentdate.getMonth()+1)  + "-" ' + '\n' +
    '                + currentdate.getDate()' + '\n' +
    '//console.log(datetime, exp_str);' + '\n' +
    '' + '\n' +
    'const expire = new Date(exp_year+\'-\'+exp_month+\'-\'+exp_day);' + '\n' +
    'const actual = new Date(datetime);' + '\n' +
    'const diffTime = Math.abs(expire - actual);' + '\n' +
    'const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24)); ' + '\n' +
    '' + '\n' +
    '//console.log(actual, expire);' + '\n' +
    '' + '\n' +
    'if(actual <= expire) {' + '\n' +
    '    console.log("NOTICE: Time until next health check",diffDays,"days.");' + '\n' +
    '    document.getElementById("health-notice").style.display = "none";' + '\n' +
    '} else {' + '\n' +
    '    console.log("NOTICE: Needed health check",diffDays,' + '\n' +
    '        "days ago. Please contact Checkpoint 3 at https://www.checkpointthree.com/.");' + '\n' +
    '    document.getElementById("health-notice").style.display = "block";' + '\n' +
    '}' + '\n' +
    '' + '\n' +
    'var ver_text = document.getElementsByClassName("version");' + '\n' +
    'for(var v=0;v<ver_text.length;v++)' + '\n' +
    '    ver_text[v].innerHTML = "Version: "+v3d.cp3license.version;' + '\n' +
    '' + '\n' +
    'if(!valid) {' + '\n' +
    '    document.getElementsByClassName("page-wrapper")[0].remove();' + '\n' +
    '    document.getElementById("cop-section").remove();' + '\n' +
    '    document.getElementById("v3d-container").remove();' + '\n' +
    '    document.getElementsByTagName("object")[0].remove();' + '\n' +
    '    document.getElementById("go-start").remove();' + '\n' +
    '}')))(appInstance, v3d, PL, VARS, PROC);

  }, function() {}, true);
})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  status2 = Math.round(_initGlob.percentage);
  setHTMLElemStyle('width', String(2 * Math.round(_initGlob.percentage)) + '%', 'progress-light', false);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  registerSetTimeout(2, function() {

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('console.log(\'finished loading!\');' + '\n' +
    '' + '\n' +
    'var startbtn = document.getElementById("go-start");' + '\n' +
    'var loader = document.getElementsByClassName("loader-wrapper")[0];' + '\n' +
    '' + '\n' +
    'startbtn.style.display = "block";' + '\n' +
    'loader.style.display = "none";' + '\n' +
    '' + '\n' +
    'var slide_btn = document.getElementById("slide-open");' + '\n' +
    'var arrow = slide_btn.getElementsByClassName("arrow")[0];' + '\n' +
    'var nav = document.getElementsByClassName("navbar2_component")[0];' + '\n' +
    'var flex = document.getElementById("flex-block");' + '\n' +
    '' + '\n' +
    'var table_head = document.getElementById("header");' + '\n' +
    'var table_body = document.getElementById("table-body");' + '\n' +
    '' + '\n' +
    'table_head.addEventListener("scroll",function(event){' + '\n' +
    '    table_body.scrollLeft = table_head.scrollLeft;' + '\n' +
    '});' + '\n' +
    'table_body.addEventListener("scroll",function(event){' + '\n' +
    '    table_head.scrollLeft = table_body.scrollLeft;' + '\n' +
    '});' + '\n' +
    '' + '\n' +
    'var leftStart = table_body.scrollLeft;' + '\n' +
    'var topStart = table_body.scrollTop;' + '\n' +
    'var isLocked = false;' + '\n' +
    'var isLeft = false;' + '\n' +
    '    ' + '\n' +
    'var xStart = 0;' + '\n' +
    'var yStart = 0;' + '\n' +
    'var xNow = 0;' + '\n' +
    'var yNow = 0;' + '\n' +
    '' + '\n' +
    'var diffX = 0;' + '\n' +
    'var diffY = 0;' + '\n' +
    '' + '\n' +
    'var lockInterval;' + '\n' +
    '' + '\n' +
    'table_body.addEventListener("touchmove",function(event){' + '\n' +
    '    var pos = touchPosition(event);' + '\n' +
    '    xNow = pos.x;' + '\n' +
    '    yNow = pos.y;' + '\n' +
    '    event.preventDefault();' + '\n' +
    '    ' + '\n' +
    '    if(isLocked) {' + '\n' +
    '        diffX = Math.abs(xNow - xStart);' + '\n' +
    '        diffY = Math.abs(yNow - yStart);' + '\n' +
    '        ' + '\n' +
    '        //console.log("is locked and coords are",diffX,diffY);' + '\n' +
    '        //table_body.classList.add("scrollNone");' + '\n' +
    '        ' + '\n' +
    '        if(diffX >= diffY) {' + '\n' +
    '            //console.log("scroll left");' + '\n' +
    '            table_body.scrollLeft = leftStart - (xNow - xStart);' + '\n' +
    '            table_head.scrollLeft = table_body.scrollLeft;' + '\n' +
    '            ' + '\n' +
    '        } else {' + '\n' +
    '            //console.log("scroll up");' + '\n' +
    '            table_body.scrollTop = topStart - (yNow - yStart);' + '\n' +
    '        }' + '\n' +
    '    }' + '\n' +
    '});' + '\n' +
    'var scrollSelectThreshold = 110; //ms' + '\n' +
    'table_body.addEventListener("touchstart",function(event){' + '\n' +
    '    var pos = touchPosition(event);' + '\n' +
    '    xStart = pos.x;' + '\n' +
    '    yStart = pos.y;' + '\n' +
    '    //event.preventDefault();' + '\n' +
    '    table_body.classList.add("scrollNone");' + '\n' +
    '' + '\n' +
    '    leftStart = table_body.scrollLeft;' + '\n' +
    '    topStart = table_body.scrollTop;' + '\n' +
    '    ' + '\n' +
    '    //console.log("touch");' + '\n' +
    '    ' + '\n' +
    '    setTimeout(function(){' + '\n' +
    '            ' + '\n' +
    '        if(!isLocked) {' + '\n' +
    '             ' + '\n' +
    '            if(diffX >= diffY) {' + '\n' +
    '                yStart = yNow;' + '\n' +
    '            } else {' + '\n' +
    '                xStart = xNow;' + '\n' +
    '            }' + '\n' +
    '            ' + '\n' +
    '            //table_body.classList.add("scrollNone");' + '\n' +
    '            isLocked = true;' + '\n' +
    '        }    ' + '\n' +
    '    },scrollSelectThreshold);' + '\n' +
    '});' + '\n' +
    'table_body.addEventListener("touchend",function(event){' + '\n' +
    '    isLocked = false;' + '\n' +
    '    table_body.classList.remove("scrollNone");' + '\n' +
    '});' + '\n' +
    '' + '\n' +
    'var touchPosition = function(e) {' + '\n' +
    '    if(e.type == \'touchstart\' || e.type == \'touchmove\' || ' + '\n' +
    '        e.type == \'touchend\' || e.type == \'touchcancel\')' + '\n' +
    '    {' + '\n' +
    '        //console.log(e.touches,e.changedTouches);' + '\n' +
    '        var touch = e.touches[0] || e.changedTouches[0];' + '\n' +
    '        x = touch.pageX;' + '\n' +
    '        y = touch.pageY;' + '\n' +
    '        ' + '\n' +
    '    } else if (e.type == \'mousedown\' || e.type == \'mouseup\' || ' + '\n' +
    '        e.type == \'mousemove\' || e.type == \'mouseover\'|| ' + '\n' +
    '        e.type==\'mouseout\' || e.type==\'mouseenter\' || e.type==\'mouseleave\') ' + '\n' +
    '    {' + '\n' +
    '        x = e.clientX;' + '\n' +
    '        y = e.clientY;' + '\n' +
    '    }' + '\n' +
    '    ' + '\n' +
    '    return {' + '\n' +
    '        x : x,' + '\n' +
    '        y : y' + '\n' +
    '    };' + '\n' +
    '};' + '\n' +
    '' + '\n' +
    'window.onresize = function() {' + '\n' +
    '    resize();' + '\n' +
    '    ' + '\n' +
    '    //document.getElementById("bump").style.backgroundColor = "red";' + '\n' +
    '}' + '\n' +
    '' + '\n' +
    'resize();' + '\n' +
    '' + '\n' +
    'function resize() {' + '\n' +
    '    var side = document.getElementById("v3d-container");' + '\n' +
    '    var header = document.getElementById("header");' + '\n' +
    '    var height = document.body.clientHeight;' + '\n' +
    '    var width = document.body.clientWidth;' + '\n' +
    '    var nav = document.getElementsByClassName("navbar2_component")[0];' + '\n' +
    '    var btnPos = 0;' + '\n' +
    '    var arrow = document.getElementsByClassName("arrow")[0];' + '\n' +
    '    ' + '\n' +
    '    arrow.getElementsByClassName("vertical")[0].style.transform = "rotate(0deg)";' + '\n' +
    '    arrow.getElementsByClassName("horizontal")[0].style.transform = "rotate(0deg)";' + '\n' +
    '    ' + '\n' +
    '    slide_btn.classList.remove("closed");' + '\n' +
    '    header.style.display = "block";' + '\n' +
    '    ' + '\n' +
    '    //console.log(nav);' + '\n' +
    '    ' + '\n' +
    '    puzzles.procedures["reOrientation"]();' + '\n' +
    '    ' + '\n' +
    '    var mobile_header = document.getElementsByClassName("navbar2_container-2")[0]' + '\n' +
    '            .getElementsByClassName("mobile-only")[0];' + '\n' +
    '            ' + '\n' +
    '    var mobile_menu = document.getElementById("menu-btn");' + '\n' +
    '    ' + '\n' +
    '    if(width <= 767) {' + '\n' +
    '        header.style.display = "none";' + '\n' +
    '        slide_btn.classList.add("closed");' + '\n' +
    '        btnPos = -(height - nav.offsetHeight);' + '\n' +
    '        //slide_btn.style.bottom = btnPos + "px";' + '\n' +
    '        //flex.style.bottom = "2%";' + '\n' +
    '        flex.style.bottom = "-5px";' + '\n' +
    '        arrow.style.bottom = "0";' + '\n' +
    '        ' + '\n' +
    '        console.log("thin browser");' + '\n' +
    '        mobile_header.style.display = "block";' + '\n' +
    '        mobile_menu.style.display = "flex";' + '\n' +
    '        newHeight = 200;' + '\n' +
    '        ' + '\n' +
    '    } else {' + '\n' +
    '        mobile_header.style.display = "none";' + '\n' +
    '        mobile_menu.style.display = "none";' + '\n' +
    '        newHeight = side.offsetHeight - header.offsetHeight;' + '\n' +
    '    }' + '\n' +
    '    ' + '\n' +
    '    document.getElementById("table-body").style = \'height: \' + newHeight + \'px !important;\';' + '\n' +
    '}')))(appInstance, v3d, PL, VARS, PROC);

  });
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

const PzLib = createPzLib({ v3d, appInstance });

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["restoreMaterials"] = restoreMaterials;
this.procedures["alphaMaterials"] = alphaMaterials;
this.procedures["focusMaterials"] = focusMaterials;
this.procedures["playAnimation"] = playAnimation;
this.procedures["goToFrame"] = goToFrame;
this.procedures["handleAnnot"] = handleAnnot;
this.procedures["setMaterialObj"] = setMaterialObj;
this.procedures["getMaterial"] = getMaterial;
this.procedures["closeTabs"] = closeTabs;
this.procedures["isAnimating"] = isAnimating2;
this.procedures["click listings"] = click_listings;
this.procedures["doHover"] = doHover;
this.procedures["multiHover"] = multiHover;
this.procedures["stopHover"] = stopHover;
this.procedures["showMultiple"] = showMultiple;
this.procedures["resetMaterials"] = resetMaterials;
this.procedures["showObject"] = showObject;
this.procedures["clearSearch"] = clearSearch;
this.procedures["restoreModel"] = restoreModel;
this.procedures["parseCSV"] = parseCSV;
this.procedures["readContent"] = readContent;
this.procedures["hideAnnotations"] = hideAnnotations2;
this.procedures["resetCamera"] = resetCamera;
this.procedures["moveCamera"] = moveCamera;
this.procedures["handleNav"] = handleNav;
this.procedures["doSearch"] = doSearch;

var PROC = {
    "restoreMaterials": restoreMaterials,
    "alphaMaterials": alphaMaterials,
    "focusMaterials": focusMaterials,
    "playAnimation": playAnimation,
    "goToFrame": goToFrame,
    "handleAnnot": handleAnnot,
    "setMaterialObj": setMaterialObj,
    "getMaterial": getMaterial,
    "closeTabs": closeTabs,
    "isAnimating": isAnimating2,
    "click listings": click_listings,
    "doHover": doHover,
    "multiHover": multiHover,
    "stopHover": stopHover,
    "showMultiple": showMultiple,
    "resetMaterials": resetMaterials,
    "showObject": showObject,
    "clearSearch": clearSearch,
    "restoreModel": restoreModel,
    "parseCSV": parseCSV,
    "readContent": readContent,
    "hideAnnotations": hideAnnotations2,
    "resetCamera": resetCamera,
    "moveCamera": moveCamera,
    "handleNav": handleNav,
    "doSearch": doSearch,
};

var VARS = Object.defineProperties({}, {
    'args': { get: function() { return args; }, set: function(val) { args = val; } },
    'i': { get: function() { return i; }, set: function(val) { i = val; } },
    'material': { get: function() { return material; }, set: function(val) { material = val; } },
    'object': { get: function() { return object; }, set: function(val) { object = val; } },
    'property': { get: function() { return property; }, set: function(val) { property = val; } },
    'value': { get: function() { return value; }, set: function(val) { value = val; } },
    'willBeExpanded': { get: function() { return willBeExpanded; }, set: function(val) { willBeExpanded = val; } },
    'isAlpha': { get: function() { return isAlpha; }, set: function(val) { isAlpha = val; } },
    'isAnimating': { get: function() { return isAnimating; }, set: function(val) { isAnimating = val; } },
    'camera_moving': { get: function() { return camera_moving; }, set: function(val) { camera_moving = val; } },
    'isExpanded': { get: function() { return isExpanded; }, set: function(val) { isExpanded = val; } },
    'object_lock': { get: function() { return object_lock; }, set: function(val) { object_lock = val; } },
    'model': { get: function() { return model; }, set: function(val) { model = val; } },
    'search_stack': { get: function() { return search_stack; }, set: function(val) { search_stack = val; } },
    'j': { get: function() { return j; }, set: function(val) { j = val; } },
    'part': { get: function() { return part; }, set: function(val) { part = val; } },
    'isFocused': { get: function() { return isFocused; }, set: function(val) { isFocused = val; } },
    'isIsolated': { get: function() { return isIsolated; }, set: function(val) { isIsolated = val; } },
    'objects_list': { get: function() { return objects_list; }, set: function(val) { objects_list = val; } },
    'alpha_material': { get: function() { return alpha_material; }, set: function(val) { alpha_material = val; } },
    'initialHeight': { get: function() { return initialHeight; }, set: function(val) { initialHeight = val; } },
    'k': { get: function() { return k; }, set: function(val) { k = val; } },
    'materials_list': { get: function() { return materials_list; }, set: function(val) { materials_list = val; } },
    'parts_list': { get: function() { return parts_list; }, set: function(val) { parts_list = val; } },
    'm': { get: function() { return m; }, set: function(val) { m = val; } },
    'annotations': { get: function() { return annotations; }, set: function(val) { annotations = val; } },
    'system_start': { get: function() { return system_start; }, set: function(val) { system_start = val; } },
    'focus_material': { get: function() { return focus_material; }, set: function(val) { focus_material = val; } },
    'hideAnnotations': { get: function() { return hideAnnotations; }, set: function(val) { hideAnnotations = val; } },
    'search_term': { get: function() { return search_term; }, set: function(val) { search_term = val; } },
    'search_found': { get: function() { return search_found; }, set: function(val) { search_found = val; } },
    'anim_speed': { get: function() { return anim_speed; }, set: function(val) { anim_speed = val; } },
    'emptys_list': { get: function() { return emptys_list; }, set: function(val) { emptys_list = val; } },
    'csv_file': { get: function() { return csv_file; }, set: function(val) { csv_file = val; } },
    'file': { get: function() { return file; }, set: function(val) { file = val; } },
    'about_text': { get: function() { return about_text; }, set: function(val) { about_text = val; } },
    'anims_package': { get: function() { return anims_package; }, set: function(val) { anims_package = val; } },
    'soft_load': { get: function() { return soft_load; }, set: function(val) { soft_load = val; } },
    'last_step': { get: function() { return last_step; }, set: function(val) { last_step = val; } },
    'cur_step': { get: function() { return cur_step; }, set: function(val) { cur_step = val; } },
    'start': { get: function() { return start; }, set: function(val) { start = val; } },
    'playInterrupt': { get: function() { return playInterrupt; }, set: function(val) { playInterrupt = val; } },
    'centerOn': { get: function() { return centerOn; }, set: function(val) { centerOn = val; } },
    'canBlurClose': { get: function() { return canBlurClose; }, set: function(val) { canBlurClose = val; } },
    'cameraDist': { get: function() { return cameraDist; }, set: function(val) { cameraDist = val; } },
    'isExpandEnabled': { get: function() { return isExpandEnabled; }, set: function(val) { isExpandEnabled = val; } },
    'end': { get: function() { return end; }, set: function(val) { end = val; } },
    'menuVisible': { get: function() { return menuVisible; }, set: function(val) { menuVisible = val; } },
    'base_material': { get: function() { return base_material; }, set: function(val) { base_material = val; } },
});

var args, i, material, object, property, value, willBeExpanded, isAlpha, file, isAnimating, hideAnnotations, centerOn, canBlurClose, camera_moving, isExpanded, search_term, object_lock, model, search_stack, j, part, isFocused, isIsolated, objects_list, alpha_material, search_found, initialHeight, k, materials_list, parts_list, m, start, cameraDist, annotations, system_start, focus_material, isExpandEnabled, end, menuVisible, anim_speed, base_material, emptys_list, csv_file, about_text, anims_package, soft_load, last_step, cur_step, playInterrupt;

// setCameraParam puzzle
function setCameraParam(type, camSelector, param) {

    const camNames = PzLib.retrieveObjectNames(camSelector);

    camNames.forEach(function(camName) {
        if (!camName)
            return;

        var cam = PzLib.getObjectByName(camName);
        if (!cam || !cam.isCamera) return;

        if (!(cam.isPerspectiveCamera || cam.isOrthographicCamera)) {
            console.error('setCameraParam: Incompatible camera type, have to be perspective or orthographic');
            return;
        }

        let isSetOrbitParam = false;
        let isSetFirstpersonParam = false;

        switch (type) {
            case 'ORBIT_MIN_DISTANCE_PERSP':
            case 'ORBIT_MAX_DISTANCE_PERSP':
            case 'ORBIT_MIN_ZOOM_ORTHO':
            case 'ORBIT_MAX_ZOOM_ORTHO':
            case 'ORBIT_MIN_VERTICAL_ANGLE':
            case 'ORBIT_MAX_VERTICAL_ANGLE':
            case 'ORBIT_MIN_HORIZONTAL_ANGLE':
            case 'ORBIT_MAX_HORIZONTAL_ANGLE':
            case 'ORBIT_ALLOW_TURNOVER':
                isSetOrbitParam = true;
                break;
            case 'ENABLE_COLLISIONS':
                isSetFirstpersonParam = true;
                break;
        }

        let isSetControlsParam = (['ROTATION_SPEED', 'MOVEMENT_SPEED', 'ALLOW_PANNING', 'ALLOW_ZOOM', 'ALLOW_CTRL_ZOOM', 'KEYBOARD_CONTROLS'].includes(type) || isSetOrbitParam || isSetFirstpersonParam);

        if (isSetControlsParam) {
            if (!cam.controlSettings) {
                console.error('setCameraParam: The "' + camName +'" camera has no control settings assigned');
                return;
            } else if ((isSetOrbitParam && cam.controlSettings.type != 'ORBIT') ||
                    (isSetFirstpersonParam && cam.controlSettings.type != 'FIRST_PERSON')) {
                console.error('setCameraParam: Incompatible camera controls: ' + cam.controlSettings.type);
                return;
            }
        }

        switch (type) {
            case 'FIELD_OF_VIEW':
                if (cam.isPerspectiveCamera) {
                    cam.fov = param;
                    cam.updateProjectionMatrix();
                } else {
                    console.error('setCameraParam: Incompatible camera type, have to be perspective');
                    return;
                }
                break;
            case 'ORTHO_SCALE':
                if (cam.isOrthographicCamera) {
                    cam.zoom = param;
                    cam.updateProjectionMatrix();
                } else {
                    console.error('setCameraParam: Incompatible camera type, have to be orthographic');
                    return;
                }
                break;
            case 'ROTATION_SPEED':
                cam.controlSettings.rotateSpeed = param;
                break;
            case 'MOVEMENT_SPEED':
                cam.controlSettings.moveSpeed = param;
                break;
            case 'ALLOW_PANNING':
                cam.controlSettings.enablePan = param;
                break;
            case 'ALLOW_ZOOM':
                cam.controlSettings.enableZoom = param;
                break;
            case 'ALLOW_CTRL_ZOOM':
                cam.controlSettings.enableCtrlZoom = param;
                break;
            case 'KEYBOARD_CONTROLS':
                cam.controlSettings.enableKeys = param;
                break;
            case 'ORBIT_MIN_DISTANCE_PERSP':
                if (cam.isPerspectiveCamera) {
                    cam.controlSettings.orbitMinDistance = param;
                } else {
                    console.error('setCameraParam: Incompatible camera type, have to be perspective');
                    return;
                }
                break;
            case 'ORBIT_MAX_DISTANCE_PERSP':
                if (cam.isPerspectiveCamera) {
                    cam.controlSettings.orbitMaxDistance = param;
                } else {
                    console.error('setCameraParam: Incompatible camera type, have to be perspective');
                    return;
                }
                break;
            case 'ORBIT_MIN_ZOOM_ORTHO':
                if (cam.isOrthographicCamera) {
                    cam.controlSettings.orbitMinZoom = param;
                } else {
                    console.error('setCameraParam: Incompatible camera type, have to be orthographic');
                    return;
                }
                break;
            case 'ORBIT_MAX_ZOOM_ORTHO':
                if (cam.isOrthographicCamera) {
                    cam.controlSettings.orbitMaxZoom = param;
                } else {
                    console.error('setCameraParam: Incompatible camera type, have to be orthographic');
                    return;
                }
                break;
            case 'ORBIT_MIN_VERTICAL_ANGLE':
                cam.controlSettings.orbitMinPolarAngle = v3d.MathUtils.degToRad(param);
                break;
            case 'ORBIT_MAX_VERTICAL_ANGLE':
                cam.controlSettings.orbitMaxPolarAngle = v3d.MathUtils.degToRad(param);
                break;
            case 'ORBIT_MIN_HORIZONTAL_ANGLE':
                cam.controlSettings.orbitMinAzimuthAngle = v3d.MathUtils.degToRad(param);
                break;
            case 'ORBIT_MAX_HORIZONTAL_ANGLE':
                cam.controlSettings.orbitMaxAzimuthAngle = v3d.MathUtils.degToRad(param);
                break;
            case 'ORBIT_ALLOW_TURNOVER':
                cam.controlSettings.orbitEnableTurnover = param;
                break;
            case 'ENABLE_COLLISIONS':
                cam.controlSettings.enableCollisions = param;
                break;
            case 'CLIP_START':
                cam.near = param;
                cam.updateProjectionMatrix();
                break;
            case 'CLIP_END':
                cam.far = param;
                cam.updateProjectionMatrix();
                break;
        }

        if (isSetControlsParam)
            appInstance.enableControls();

    });
}

// getActiveCamera puzzle
function getActiveCamera() {
    var camera = appInstance.getCamera();
    return camera.name;
}

// whenMoved puzzle
function whenMoved(objSelector, velocity, cbStart, cbMove, cbStop) {

    _pGlob.objMovementInfos = _pGlob.objMovementInfos || {};

    function savePreviousCoords(objName, obj, prevIsMoving) {
        // GC optimization
        if (_pGlob.objMovementInfos[objName]) {
            var info = _pGlob.objMovementInfos[objName];

            info.prevPosX = obj.position.x;
            info.prevPosY = obj.position.y;
            info.prevPosZ = obj.position.z;
            info.prevRotX = obj.rotation.x;
            info.prevRotY = obj.rotation.y;
            info.prevRotZ = obj.rotation.z;
            info.prevScaX = obj.scale.x;
            info.prevScaY = obj.scale.y;
            info.prevScaZ = obj.scale.z;
            info.prevIsMoving = prevIsMoving;
        } else {
            var info = {
                prevPosX: obj.position.x,
                prevPosY: obj.position.y,
                prevPosZ: obj.position.z,
                prevRotX: obj.rotation.x,
                prevRotY: obj.rotation.y,
                prevRotZ: obj.rotation.z,
                prevScaX: obj.scale.x,
                prevScaY: obj.scale.y,
                prevScaZ: obj.scale.z,
                prevIsMoving: prevIsMoving
            };
            _pGlob.objMovementInfos[objName] = info;
        }

        return info;
    }

    function checkMoving(objName, obj, elapsed) {

        var info = _pGlob.objMovementInfos[objName] ||
            savePreviousCoords(objName, obj, false);

        var delta = velocity * elapsed;

        var isMoving =
            Math.abs(obj.position.x - info.prevPosX) > delta ||
            Math.abs(obj.position.y - info.prevPosY) > delta ||
            Math.abs(obj.position.z - info.prevPosZ) > delta ||
            Math.abs(obj.rotation.x - info.prevRotX) > delta ||
            Math.abs(obj.rotation.y - info.prevRotY) > delta ||
            Math.abs(obj.rotation.z - info.prevRotZ) > delta ||
            Math.abs(obj.scale.x - info.prevScaX) > delta ||
            Math.abs(obj.scale.y - info.prevScaY) > delta ||
            Math.abs(obj.scale.z - info.prevScaZ) > delta;

        if (!info.prevIsMoving && isMoving) {
            cbStart(objName);
            savePreviousCoords(objName, obj, true);
        } else if (info.prevIsMoving && isMoving) {
            cbMove(objName);
            savePreviousCoords(objName, obj, true);
        } else if (info.prevIsMoving && !isMoving) {
            cbStop(objName);
            savePreviousCoords(objName, obj, false);
        } else {
            savePreviousCoords(objName, obj, false);
        }
    }

    function addToRender(objSelector) {

        function renderCb(elapsed, timeline) {

            var objNames = PzLib.retrieveObjectNames(objSelector);

            for (var i = 0; i < objNames.length; i++) {
                var objName = objNames[i];

                var obj = PzLib.getObjectByName(objName);
                if (!obj)
                    return;

                checkMoving(objName, obj, elapsed);
            }
        }

        appInstance.renderCallbacks.push(renderCb);
        if (PL.editorRenderCallbacks)
            PL.editorRenderCallbacks.push([appInstance, renderCb]);

    }

    addToRender(objSelector);

}

// enableRendering puzzle
function enableRendering() {
    appInstance.enableRendering();
}

// disableRendering puzzle
function disableRendering(enableSSAA) {
    appInstance.ssaaOnPause = enableSSAA;
    appInstance.disableRendering(1);
}

// everyFrame puzzle
function registerEveryFrame(callback) {
    if (typeof callback == 'function') {
        appInstance.renderCallbacks.push(callback);
        if (PL.editorRenderCallbacks)
            PL.editorRenderCallbacks.push([appInstance, callback]);
    }
}

// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}

// setInterval puzzle
function registerInterval(timeout, callback) {
    var timerId = window.setInterval(function() { callback(timerId) }, 1000 * timeout);
}

function getObjectsFromCollect(obj, type, out) {
    if (!PzLib.isObjectWorthProcessing(obj)) {
        return;
    }

    switch (type) {
    case 'ALL':
        if (out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'ANNOTATION':
        if (obj.isAnnotation && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'BONE':
        if (obj.isBone && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'CAMERA':
        if (obj.isCamera && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'EMPTY':
        if (!obj.isAnnotationControl && !obj.isBone && !obj.isCamera &&
                !obj.isGroup && !obj.isLine && !obj.isLOD && !obj.isLight &&
                !PzLib.isMeshObject(obj) && !obj.isPoints && !obj.isScene &&
                !obj.isSprite && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'LIGHT':
        if (obj.isLight && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    case 'MESH':
        if (PzLib.isMeshObject(obj) && out.indexOf(obj.name) < 0)
            out.push(obj.name);
        break;
    default:
        console.error('getObjectsFrom: Unknown object type: ' + type);
        break;
    }

    for (var i = 0; i < obj.children.length; i++) {
        var child = obj.children[i];
        getObjectsFromCollect(child, type, out);
    }
}

// getObjectsFrom puzzle
function getObjectsFrom(objSelector, type) {

    var out = [];

    var objNames = PzLib.retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;

        var obj = PzLib.getObjectByName(objName);
        if (!obj)
            continue;

        getObjectsFromCollect(obj, type, out);
    }

    return out;
}

// readCSV puzzle
function readCSV(text, delimit, from) {
    if (PzLib.isDataUrl(text)) {
        text = PzLib.extractDataUrlData(text);
    }

    return v3d.CSVParser.parse(text,
        {delimiter: delimit, skipinitialrows: from});
}

// loadFile puzzle
_pGlob.loadedFiles = {};

async function loadFile(url, onceReadyCb, onErrorCb, caching) {
    const files = _pGlob.loadedFiles;

    try {
        if (caching && url in files) {
            _pGlob.loadedFile = files[url];
            onceReadyCb();
            return;
        }

        const options = {};
        if (!caching)
            options.headers = { 'Cache-Control': 'no-cache' };

        const response = await fetch(url, options);
        if (!response.ok)
            throw new Error(response.status + ' network error');

        if (response.headers.get('Content-Type').startsWith('application/json'))
            _pGlob.loadedFile = await response.json();
        else
            _pGlob.loadedFile = await response.text();

        if (caching)
            files[url] = _pGlob.loadedFile;

        onceReadyCb();

    } catch (error) {
        console.error('puzzle load file:', error.message);
        _pGlob.loadedFile = '';
        onErrorCb();
    }
}

// getAnimations puzzle
function getAnimations(objSelector) {
    const objNames = PzLib.retrieveObjectNames(objSelector);

    const animations = [];
    for (let i = 0; i < objNames.length; i++) {
        const objName = objNames[i];
        if (!objName)
            continue;
        // use objName as animName - for now we have one-to-one match
        const action = v3d.SceneUtils.getAnimationActionByName(appInstance, objName);
        if (action)
            animations.push(objName);
    }
    return animations;
}

_pGlob.animMixerCallbacks = [];

var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished)) {
            PzLib.bindListener(appInstance.mixer, 'finished', onMixerFinished);
        }
    };

}();

// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = PzLib.getSceneByAction(action);
                var frameRate = PzLib.getSceneAnimFrameRate(scene);

                action.repetitions = Infinity;

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = PzLib.getSceneByAction(action);
            var frameRate = PzLib.getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        case 'SET_SPEED':
            var timeScale = parseFloat(speed);
            action.timeScale = rev ? -timeScale : timeScale;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}

// assignMaterial puzzle
function assignMat(objSelector, matName) {
    const objNames = PzLib.retrieveObjectNames(objSelector);
    if (!matName)
        return;

    const isMaterialInScene = (mat) => v3d.SceneUtils.getMaterialsByName(appInstance, mat.name).some(iMat => iMat === mat);
    const materialsCache = _pGlob.materialsCache;
    const mat = materialsCache.get(matName) || v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return;
    for (let i = 0; i < objNames.length; i++) {
        const objName = objNames[i];
        if (!objName)
            continue;
        const obj = PzLib.getObjectByName(objName);
        if (obj) {
            const firstSubmesh = obj.resolveMultiMaterial()[0];
            const oldMat = firstSubmesh.material;
            firstSubmesh.material = mat;

            if (!isMaterialInScene(oldMat)) {
                materialsCache.set(oldMat.name, oldMat);
            }
        }
    }

    if (materialsCache.has(mat.name) && isMaterialInScene(mat)) {
        materialsCache.delete(mat.name);
    }
}

// Describe this function...
function restoreMaterials(args) {
var VARS = Object.defineProperties({}, {
    'args': { get: function() { return args; }, set: function(val) { args = val; } },
    'i': { get: function() { return i; }, set: function(val) { i = val; } },
    'material': { get: function() { return material; }, set: function(val) { material = val; } },
    'object': { get: function() { return object; }, set: function(val) { object = val; } },
    'property': { get: function() { return property; }, set: function(val) { property = val; } },
    'value': { get: function() { return value; }, set: function(val) { value = val; } },
    'willBeExpanded': { get: function() { return willBeExpanded; }, set: function(val) { willBeExpanded = val; } },
    'isAlpha': { get: function() { return isAlpha; }, set: function(val) { isAlpha = val; } },
    'isAnimating': { get: function() { return isAnimating; }, set: function(val) { isAnimating = val; } },
    'camera_moving': { get: function() { return camera_moving; }, set: function(val) { camera_moving = val; } },
    'isExpanded': { get: function() { return isExpanded; }, set: function(val) { isExpanded = val; } },
    'object_lock': { get: function() { return object_lock; }, set: function(val) { object_lock = val; } },
    'model': { get: function() { return model; }, set: function(val) { model = val; } },
    'search_stack': { get: function() { return search_stack; }, set: function(val) { search_stack = val; } },
    'j': { get: function() { return j; }, set: function(val) { j = val; } },
    'part': { get: function() { return part; }, set: function(val) { part = val; } },
    'isFocused': { get: function() { return isFocused; }, set: function(val) { isFocused = val; } },
    'isIsolated': { get: function() { return isIsolated; }, set: function(val) { isIsolated = val; } },
    'objects_list': { get: function() { return objects_list; }, set: function(val) { objects_list = val; } },
    'alpha_material': { get: function() { return alpha_material; }, set: function(val) { alpha_material = val; } },
    'initialHeight': { get: function() { return initialHeight; }, set: function(val) { initialHeight = val; } },
    'k': { get: function() { return k; }, set: function(val) { k = val; } },
    'materials_list': { get: function() { return materials_list; }, set: function(val) { materials_list = val; } },
    'parts_list': { get: function() { return parts_list; }, set: function(val) { parts_list = val; } },
    'm': { get: function() { return m; }, set: function(val) { m = val; } },
    'annotations': { get: function() { return annotations; }, set: function(val) { annotations = val; } },
    'system_start': { get: function() { return system_start; }, set: function(val) { system_start = val; } },
    'focus_material': { get: function() { return focus_material; }, set: function(val) { focus_material = val; } },
    'hideAnnotations': { get: function() { return hideAnnotations; }, set: function(val) { hideAnnotations = val; } },
    'search_term': { get: function() { return search_term; }, set: function(val) { search_term = val; } },
    'search_found': { get: function() { return search_found; }, set: function(val) { search_found = val; } },
    'anim_speed': { get: function() { return anim_speed; }, set: function(val) { anim_speed = val; } },
    'emptys_list': { get: function() { return emptys_list; }, set: function(val) { emptys_list = val; } },
    'csv_file': { get: function() { return csv_file; }, set: function(val) { csv_file = val; } },
    'file': { get: function() { return file; }, set: function(val) { file = val; } },
    'about_text': { get: function() { return about_text; }, set: function(val) { about_text = val; } },
    'anims_package': { get: function() { return anims_package; }, set: function(val) { anims_package = val; } },
    'soft_load': { get: function() { return soft_load; }, set: function(val) { soft_load = val; } },
    'last_step': { get: function() { return last_step; }, set: function(val) { last_step = val; } },
    'cur_step': { get: function() { return cur_step; }, set: function(val) { cur_step = val; } },
    'start': { get: function() { return start; }, set: function(val) { start = val; } },
    'playInterrupt': { get: function() { return playInterrupt; }, set: function(val) { playInterrupt = val; } },
    'centerOn': { get: function() { return centerOn; }, set: function(val) { centerOn = val; } },
    'canBlurClose': { get: function() { return canBlurClose; }, set: function(val) { canBlurClose = val; } },
    'cameraDist': { get: function() { return cameraDist; }, set: function(val) { cameraDist = val; } },
    'isExpandEnabled': { get: function() { return isExpandEnabled; }, set: function(val) { isExpandEnabled = val; } },
    'end': { get: function() { return end; }, set: function(val) { end = val; } },
    'menuVisible': { get: function() { return menuVisible; }, set: function(val) { menuVisible = val; } },
    'base_material': { get: function() { return base_material; }, set: function(val) { base_material = val; } },
});

  if (object_lock == false) {
    clearSearch();
    restoreModel();
    isAnimating = true;
    if (args == true) {

      operateAnimation('PLAY', getAnimations(model), system_start, system_start, 'LoopOnce', 100,
              function() {}, false);


      Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'document.getElementById("current-time").innerHTML = "00:00";')(appInstance, v3d, PL, VARS, PROC);

    }
    var object_end = objects_list.length - eval("try { eval('v3d.numMats') } catch(e) { }");
    var object_inc = 1;
    if (0 > object_end) {
      object_inc = -object_inc;
    }
    for (let object = 0; object_inc >= 0 ? object <= object_end : object >= object_end; object += object_inc) {
      assignMat(objects_list[object], materials_list[object]);
    }
    registerSetTimeout(0.5, function() {
      isAnimating = false;
    });
  }
}

// Describe this function...
function alphaMaterials(args) {
  if (object_lock == false) {
    clearSearch();
    isAnimating = true;
    var object_end2 = args.length - 1;
    var object_inc2 = 1;
    if (0 > object_end2) {
      object_inc2 = -object_inc2;
    }
    for (let object = 0; object_inc2 >= 0 ? object <= object_end2 : object >= object_end2; object += object_inc2) {
      for (var j_index in objects_list) {
        let j = objects_list[j_index];
        if (args[object] == j) {
          assignMat(j, alpha_material);
        }
      }
    }
    registerSetTimeout(0.5, function() {
      isAnimating = false;
    });
  }
}

// Describe this function...
function focusMaterials(args) {
  if (object_lock == false) {
    isAnimating = true;
    var object_end3 = args.length - 1;
    var object_inc3 = 1;
    if (0 > object_end3) {
      object_inc3 = -object_inc3;
    }
    for (let object = 0; object_inc3 >= 0 ? object <= object_end3 : object >= object_end3; object += object_inc3) {
      for (var j_index2 in objects_list) {
        let j = objects_list[j_index2];
        if (args[object] == j) {
          assignMat(j, focus_material);
        }
      }
    }
    registerSetTimeout(0.5, function() {
      isAnimating = false;
    });
  }
}

// dictGet puzzle
function dictGet(dict, key, defaultValue) {
    if (dict && typeof dict == 'object')
        return (key in dict) ? dict[key] : defaultValue;
}

// Describe this function...
function playAnimation(args) {
  isAnimating = true;
  console.log(dictGet(args, 'end'));

  operateAnimation('PLAY', getAnimations(model), dictGet(args, 'start'), dictGet(args, 'end'), 'AUTO', 3,
          function() {
    registerSetTimeout(0.5, function() {
      isAnimating = false;
    });
  }, false);

      }

// isAnimationPlaying puzzle
function isAnimationPlaying(animations) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];
    for (let i = 0; i < animations.length; i++) {
        const animName = animations[i];
        if (!animName)
            continue;
        const action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (action && action.isRunning())
            return true;
    }
    return false;
}

// Describe this function...
function goToFrame(i) {
  isAnimating = true;
  isExpanded = false;

  operateAnimation('SET_FRAME', getAnimations(model), i, null, 'AUTO', 1,
          function() {}, false);

      if (isAnimationPlaying(getAnimations(model))) {
    registerSetTimeout(0.5, function() {
      isAnimating = false;
    });
  } else {
    registerSetTimeout(2, function() {
      isAnimating = false;
    });
  }
}

// getEntityByName puzzle
function getEntityByName(name, getWhat) {
    switch (getWhat) {
        case 'OBJECT':
        case 'ANIMATION':
        case 'MATERIAL':
            return name;
        case 'GROUP':
            return ['GROUP', name];
    }
}

// addAnnotation and removeAnnotation puzzles
function handleAnnot2(add, annot, objSelector, contents, id, name) {
    var objNames = PzLib.retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = PzLib.getObjectByName(objName);
        if (!obj)
            continue;
        // check if it already has an annotation and remove it
        for (var j = 0; j < obj.children.length; j++) {
            var child = obj.children[j];
            if (child.type == "Annotation") {
                // delete all childs of annotation
                child.traverse(function(child2) {
                    if (child2.isAnnotation)
                        child2.dispose();
                    });
                obj.remove(child);
            }
        }
        if (add) {
            var aObj = new v3d.Annotation(appInstance.container, annot, contents);
            aObj.name = PzLib.generateUniqueObjectName(name ? name : annot);
            aObj.fadeObscured = _pGlob.fadeAnnotations;
            if (id) {
                aObj.annotation.id = id;
                aObj.annotationDialog.id = id+'_dialog';
            }
            obj.add(aObj);
        }
    }
}

// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = PzLib.getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;

        PzLib.bindListener(elem, eventType, callback);
    }
}

// Describe this function...
function handleAnnot(args) {
var VARS = Object.defineProperties({}, {
    'args': { get: function() { return args; }, set: function(val) { args = val; } },
    'i': { get: function() { return i; }, set: function(val) { i = val; } },
    'material': { get: function() { return material; }, set: function(val) { material = val; } },
    'object': { get: function() { return object; }, set: function(val) { object = val; } },
    'property': { get: function() { return property; }, set: function(val) { property = val; } },
    'value': { get: function() { return value; }, set: function(val) { value = val; } },
    'willBeExpanded': { get: function() { return willBeExpanded; }, set: function(val) { willBeExpanded = val; } },
    'isAlpha': { get: function() { return isAlpha; }, set: function(val) { isAlpha = val; } },
    'isAnimating': { get: function() { return isAnimating; }, set: function(val) { isAnimating = val; } },
    'camera_moving': { get: function() { return camera_moving; }, set: function(val) { camera_moving = val; } },
    'isExpanded': { get: function() { return isExpanded; }, set: function(val) { isExpanded = val; } },
    'object_lock': { get: function() { return object_lock; }, set: function(val) { object_lock = val; } },
    'model': { get: function() { return model; }, set: function(val) { model = val; } },
    'search_stack': { get: function() { return search_stack; }, set: function(val) { search_stack = val; } },
    'j': { get: function() { return j; }, set: function(val) { j = val; } },
    'part': { get: function() { return part; }, set: function(val) { part = val; } },
    'isFocused': { get: function() { return isFocused; }, set: function(val) { isFocused = val; } },
    'isIsolated': { get: function() { return isIsolated; }, set: function(val) { isIsolated = val; } },
    'objects_list': { get: function() { return objects_list; }, set: function(val) { objects_list = val; } },
    'alpha_material': { get: function() { return alpha_material; }, set: function(val) { alpha_material = val; } },
    'initialHeight': { get: function() { return initialHeight; }, set: function(val) { initialHeight = val; } },
    'k': { get: function() { return k; }, set: function(val) { k = val; } },
    'materials_list': { get: function() { return materials_list; }, set: function(val) { materials_list = val; } },
    'parts_list': { get: function() { return parts_list; }, set: function(val) { parts_list = val; } },
    'm': { get: function() { return m; }, set: function(val) { m = val; } },
    'annotations': { get: function() { return annotations; }, set: function(val) { annotations = val; } },
    'system_start': { get: function() { return system_start; }, set: function(val) { system_start = val; } },
    'focus_material': { get: function() { return focus_material; }, set: function(val) { focus_material = val; } },
    'hideAnnotations': { get: function() { return hideAnnotations; }, set: function(val) { hideAnnotations = val; } },
    'search_term': { get: function() { return search_term; }, set: function(val) { search_term = val; } },
    'search_found': { get: function() { return search_found; }, set: function(val) { search_found = val; } },
    'anim_speed': { get: function() { return anim_speed; }, set: function(val) { anim_speed = val; } },
    'emptys_list': { get: function() { return emptys_list; }, set: function(val) { emptys_list = val; } },
    'csv_file': { get: function() { return csv_file; }, set: function(val) { csv_file = val; } },
    'file': { get: function() { return file; }, set: function(val) { file = val; } },
    'about_text': { get: function() { return about_text; }, set: function(val) { about_text = val; } },
    'anims_package': { get: function() { return anims_package; }, set: function(val) { anims_package = val; } },
    'soft_load': { get: function() { return soft_load; }, set: function(val) { soft_load = val; } },
    'last_step': { get: function() { return last_step; }, set: function(val) { last_step = val; } },
    'cur_step': { get: function() { return cur_step; }, set: function(val) { cur_step = val; } },
    'start': { get: function() { return start; }, set: function(val) { start = val; } },
    'playInterrupt': { get: function() { return playInterrupt; }, set: function(val) { playInterrupt = val; } },
    'centerOn': { get: function() { return centerOn; }, set: function(val) { centerOn = val; } },
    'canBlurClose': { get: function() { return canBlurClose; }, set: function(val) { canBlurClose = val; } },
    'cameraDist': { get: function() { return cameraDist; }, set: function(val) { cameraDist = val; } },
    'isExpandEnabled': { get: function() { return isExpandEnabled; }, set: function(val) { isExpandEnabled = val; } },
    'end': { get: function() { return end; }, set: function(val) { end = val; } },
    'menuVisible': { get: function() { return menuVisible; }, set: function(val) { menuVisible = val; } },
    'base_material': { get: function() { return base_material; }, set: function(val) { base_material = val; } },
});

  handleAnnot2(true, dictGet(args, 'name'), getEntityByName(dictGet(args, 'object'), 'OBJECT'), dictGet(args, 'obj_id'), dictGet(args, 'id'), undefined);
  eventHTMLElem('click', dictGet(args, 'id'), false, function(event) {
    if (search_stack.length <= 1) {

      Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('var targetId = event.target.id.replace("an_","");' + '\n' +
      'var obj_id = document.getElementById("id-"+targetId).getAttribute("obj_id");' + '\n' +
      'var args = {' + '\n' +
      '    "id": targetId,' + '\n' +
      '    "name": VARS["objects_list"][parseInt(obj_id)]' + '\n' +
      '};' + '\n' +
      'var stack = [args];' + '\n' +
      'VARS["args"] = args;' + '\n' +
      'VARS["search_stack"] = stack;' + '\n' +
      '' + '\n' +
      'var next = document.getElementById("id-"+targetId).nextSibling;' + '\n' +
      '//console.log(next.id, targetId);' + '\n' +
      'while (parseInt(next.id.replace("id-","")) == parseInt(targetId)) {' + '\n' +
      '    //console.log(stack,next);' + '\n' +
      '    args = {' + '\n' +
      '        "id": next.id.replace("id-",""),' + '\n' +
      '        "name": VARS["objects_list"][parseInt(next.getAttribute("obj_id"))]' + '\n' +
      '    };' + '\n' +
      '    stack.push(args);' + '\n' +
      '    next = next.nextSibling;' + '\n' +
      '    ' + '\n' +
      '    VARS["args"] = args;' + '\n' +
      '    VARS["search_stack"] = stack;' + '\n' +
      '}' + '\n' +
      '' + '\n' +
      '/*var pair = parseInt(event.target.getElementsByTagName("div")[0].innerHTML);' + '\n' +
      '//var pair = document.getElementById("id-"+targetId).getAttribute("pair");' + '\n' +
      'var all_objs = document.querySelectorAll(\'[pair="\'+pair+\'"]\');' + '\n' +
      '//console.log("pair",pair);' + '\n' +
      'if(pair!=null) {' + '\n' +
      '    var stack = [args];' + '\n' +
      '    var hiddenItems = document.getElementsByClassName("hidden");' + '\n' +
      '    //console.log("paired item",event.target.id);' + '\n' +
      '    for(var h=0;h<hiddenItems.length;h++) {' + '\n' +
      '        if(hiddenItems[h].getAttribute("pair")==pair) {' + '\n' +
      '            //console.log("paired item",hiddenItems[h].id);' + '\n' +
      '            var obj_id = hiddenItems[h].getAttribute("obj_id");' + '\n' +
      '            stack.push({' + '\n' +
      '                "id": hiddenItems[h].id,' + '\n' +
      '                "name": VARS["objects_list"][parseInt(obj_id)]' + '\n' +
      '            });' + '\n' +
      '        }' + '\n' +
      '    }' + '\n' +
      '    VARS["search_stack"] = stack;' + '\n' +
      '}*/' + '\n' +
      '' + '\n' +
      '' + '\n' +
      'console.log(VARS["search_stack"]);')))(appInstance, v3d, PL, VARS, PROC);

      showMultiple();
    }
  });
}

// setMaterialValue puzzle
function setMaterialValue(matName, valName, value) {

    var values = PzLib.getMaterialEditableValues(matName);
    if (values.indexOf(valName) < 0)
        return;

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var valIdx = mat.nodeValueMap[valName];
            mat.nodeValue[valIdx] = Number(value);
        } else
            mat[valName] = Number(value);

        if (appInstance.scene !== null) {
            if (mat === appInstance.scene.worldMaterial) {
                appInstance.updateEnvironment(mat);
            }
        }
    }
}

// Describe this function...
function setMaterialObj(material, object, property, value) {
  assignMat(object, material);
  setMaterialValue(material, property, value);
}

// getObjectMaterial puzzle
function getObjectMaterial(objSelector) {
    var objNames = PzLib.retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = PzLib.getObjectByName(objName);
        if (!obj)
            continue;

        obj = obj.resolveMultiMaterial()[0];

        if (obj.material && typeof obj.material.name == "string")
            return obj.material.name;
    }
    return '';
}

// Describe this function...
function getMaterial(object) {
  material = getObjectMaterial(object);
  return material;
}

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = PzLib.getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}

// Describe this function...
function closeTabs() {
  setHTMLElemStyle('display', 'none', 'about-wrapper', false);
  setHTMLElemStyle('display', 'none', 'controls-wrapper', false);
  setHTMLElemStyle('display', 'none', 'links-wrapper', false);
  setHTMLElemStyle('display', 'none', 'mobile-menu', false);
}

// Describe this function...
function isAnimating2(willBeExpanded) {
  if (!isAnimationPlaying(model)) {
    if (willBeExpanded != null) {
      isExpanded = willBeExpanded;
      registerSetTimeout(0.1, function() {
        resetCamera();
      });
    }
    registerSetTimeout(0.75, function() {
      isAnimating = false;
      console.log('killing checkAnimations');
    });
  }
}

// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {
    var camera = appInstance.getCamera();

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = PzLib.transformCoordsSpace(worldPos,
                PzLib.getSceneCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = PzLib.getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = PzLib.transformCoordsSpace(worldTarget,
                PzLib.getSceneCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = PzLib.getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (camera.parent) {
            camera.parent.worldToLocal(worldPos);
        }
        camera.position.copy(worldPos);
        camera.lookAt(worldTarget);
        doSlot();
    }
}

// whenClicked puzzle
function registerOnClick(objSelector, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    PzLib.initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = PzLib.getObjectName(obj);
            var objNames = PzLib.retrieveObjectNames(objSelector);

            if (PzLib.isObjectAmongObjects(objName, objNames)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }
        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}

// whenHovered puzzle
PzLib.initObjectPicking(function(intersects, event) {

    var prevHovered = _pGlob.hoveredObject;
    var currHovered = '';

    // the event might happen before hover registration
    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    // search for closest hovered object

    var lastIntersectIndex = Infinity;
    _pGlob.objHoverInfo.forEach(function(el) {
        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = PzLib.getObjectName(obj);

            if (PzLib.isObjectAmongObjects(objName, PzLib.retrieveObjectNames(el.objSelector)) && i <= lastIntersectIndex) {
                currHovered = objName;
                lastIntersectIndex = i;
            }
        }
    });

    if (prevHovered == currHovered) return;

    // first - all "out" callbacks, then - all "over"
    _pGlob.objHoverInfo.forEach(function(el) {
        if (PzLib.isObjectAmongObjects(prevHovered, PzLib.retrieveObjectNames(el.objSelector))) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = prevHovered;
            el.callbacks[1](event);
        }
    });

    _pGlob.objHoverInfo.forEach(function(el) {
        if (PzLib.isObjectAmongObjects(currHovered, PzLib.retrieveObjectNames(el.objSelector))) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = currHovered;
            el.callbacks[0](event);
        }
    });

    _pGlob.hoveredObject = currHovered;
}, 'mousemove');

// whenHovered puzzle
function registerOnHover(objSelector, xRay, cbOver, cbOut) {

    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    _pGlob.objHoverInfo.push({
        objSelector: objSelector,
        callbacks: [cbOver, cbOut],
        xRay: xRay
    });
}

// Describe this function...
function click_listings(args) {
var VARS = Object.defineProperties({}, {
    'args': { get: function() { return args; }, set: function(val) { args = val; } },
    'i': { get: function() { return i; }, set: function(val) { i = val; } },
    'material': { get: function() { return material; }, set: function(val) { material = val; } },
    'object': { get: function() { return object; }, set: function(val) { object = val; } },
    'property': { get: function() { return property; }, set: function(val) { property = val; } },
    'value': { get: function() { return value; }, set: function(val) { value = val; } },
    'willBeExpanded': { get: function() { return willBeExpanded; }, set: function(val) { willBeExpanded = val; } },
    'isAlpha': { get: function() { return isAlpha; }, set: function(val) { isAlpha = val; } },
    'isAnimating': { get: function() { return isAnimating; }, set: function(val) { isAnimating = val; } },
    'camera_moving': { get: function() { return camera_moving; }, set: function(val) { camera_moving = val; } },
    'isExpanded': { get: function() { return isExpanded; }, set: function(val) { isExpanded = val; } },
    'object_lock': { get: function() { return object_lock; }, set: function(val) { object_lock = val; } },
    'model': { get: function() { return model; }, set: function(val) { model = val; } },
    'search_stack': { get: function() { return search_stack; }, set: function(val) { search_stack = val; } },
    'j': { get: function() { return j; }, set: function(val) { j = val; } },
    'part': { get: function() { return part; }, set: function(val) { part = val; } },
    'isFocused': { get: function() { return isFocused; }, set: function(val) { isFocused = val; } },
    'isIsolated': { get: function() { return isIsolated; }, set: function(val) { isIsolated = val; } },
    'objects_list': { get: function() { return objects_list; }, set: function(val) { objects_list = val; } },
    'alpha_material': { get: function() { return alpha_material; }, set: function(val) { alpha_material = val; } },
    'initialHeight': { get: function() { return initialHeight; }, set: function(val) { initialHeight = val; } },
    'k': { get: function() { return k; }, set: function(val) { k = val; } },
    'materials_list': { get: function() { return materials_list; }, set: function(val) { materials_list = val; } },
    'parts_list': { get: function() { return parts_list; }, set: function(val) { parts_list = val; } },
    'm': { get: function() { return m; }, set: function(val) { m = val; } },
    'annotations': { get: function() { return annotations; }, set: function(val) { annotations = val; } },
    'system_start': { get: function() { return system_start; }, set: function(val) { system_start = val; } },
    'focus_material': { get: function() { return focus_material; }, set: function(val) { focus_material = val; } },
    'hideAnnotations': { get: function() { return hideAnnotations; }, set: function(val) { hideAnnotations = val; } },
    'search_term': { get: function() { return search_term; }, set: function(val) { search_term = val; } },
    'search_found': { get: function() { return search_found; }, set: function(val) { search_found = val; } },
    'anim_speed': { get: function() { return anim_speed; }, set: function(val) { anim_speed = val; } },
    'emptys_list': { get: function() { return emptys_list; }, set: function(val) { emptys_list = val; } },
    'csv_file': { get: function() { return csv_file; }, set: function(val) { csv_file = val; } },
    'file': { get: function() { return file; }, set: function(val) { file = val; } },
    'about_text': { get: function() { return about_text; }, set: function(val) { about_text = val; } },
    'anims_package': { get: function() { return anims_package; }, set: function(val) { anims_package = val; } },
    'soft_load': { get: function() { return soft_load; }, set: function(val) { soft_load = val; } },
    'last_step': { get: function() { return last_step; }, set: function(val) { last_step = val; } },
    'cur_step': { get: function() { return cur_step; }, set: function(val) { cur_step = val; } },
    'start': { get: function() { return start; }, set: function(val) { start = val; } },
    'playInterrupt': { get: function() { return playInterrupt; }, set: function(val) { playInterrupt = val; } },
    'centerOn': { get: function() { return centerOn; }, set: function(val) { centerOn = val; } },
    'canBlurClose': { get: function() { return canBlurClose; }, set: function(val) { canBlurClose = val; } },
    'cameraDist': { get: function() { return cameraDist; }, set: function(val) { cameraDist = val; } },
    'isExpandEnabled': { get: function() { return isExpandEnabled; }, set: function(val) { isExpandEnabled = val; } },
    'end': { get: function() { return end; }, set: function(val) { end = val; } },
    'menuVisible': { get: function() { return menuVisible; }, set: function(val) { menuVisible = val; } },
    'base_material': { get: function() { return base_material; }, set: function(val) { base_material = val; } },
});


  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('var args = VARS["args"];' + '\n' +
  '' + '\n' +
  'function modifiedClickHandler(event) {' + '\n' +
  '    listingClickHandler(event, event.target.getAttribute("obj_id"));' + '\n' +
  '    ' + '\n' +
  '    if(event.target.getAttribute("pair")!=null) {' + '\n' +
  '        var pair = event.target.getAttribute("pair");' + '\n' +
  '        var hiddenItems = document.getElementsByClassName("hidden");' + '\n' +
  '        //console.log("paired item",event.target.id);' + '\n' +
  '        for(var h=0;h<hiddenItems.length;h++) {' + '\n' +
  '            if(hiddenItems[h].getAttribute("pair")==pair) {' + '\n' +
  '                //console.log("paired item",hiddenItems[h].id);' + '\n' +
  '                var fauxEvent = {};' + '\n' +
  '                fauxEvent.target = hiddenItems[h];' + '\n' +
  '                var obj_id = hiddenItems[h].getAttribute("obj_id");' + '\n' +
  '                listingClickHandler(fauxEvent, obj_id, true);' + '\n' +
  '            }' + '\n' +
  '        }' + '\n' +
  '    }' + '\n' +
  '}' + '\n' +
  '' + '\n' +
  'for(var a=0;a<args.length;a++) {' + '\n' +
  '    //console.log(args[a].id);' + '\n' +
  '    var elem = document.getElementById("id-"+args[a].id);' + '\n' +
  '    var longTouch, isScroll;' + '\n' +
  '    elem.addEventListener("click",modifiedClickHandler,false);' + '\n' +
  '    elem.addEventListener("touchend",modifiedClickHandler,false);' + '\n' +
  '    elem.addEventListener("touchstart",function(event){' + '\n' +
  '        event.preventDefault();' + '\n' +
  '        var ev = event;' + '\n' +
  '        longTouch = setTimeout(function(){' + '\n' +
  '            ev.isDefaultPrevented = function(){return false};' + '\n' +
  '            isScroll = document.getElementsByClassName("scrollNone").length > 0;' + '\n' +
  '        },160);' + '\n' +
  '    });' + '\n' +
  '}' + '\n' +
  '' + '\n' +
  'function doClick(target, shiftPressed) ' + '\n' +
  '{' + '\n' +
  '    //console.log("doClick shiftPressed?",shiftPressed, target.id);' + '\n' +
  '    if(!shiftPressed) {' + '\n' +
  '        puzzles.procedures["clearSearch"]();' + '\n' +
  '        VARS["search_stack"] = [target];' + '\n' +
  '    } else {' + '\n' +
  '        var search_stack = VARS["search_stack"];' + '\n' +
  '        var flag = true;' + '\n' +
  '        if(search_stack.length > 1) {' + '\n' +
  '            for(var i=0;i<search_stack.length;i++) {' + '\n' +
  '                var item = search_stack[i];' + '\n' +
  '                if(item.id == target.id) {' + '\n' +
  '                    flag = false;' + '\n' +
  '                    VARS["search_stack"].splice(i,1);' + '\n' +
  '                    ' + '\n' +
  '                    var new_stack = VARS["search_stack"];' + '\n' +
  '                    puzzles.procedures["clearSearch"]();' + '\n' +
  '                    VARS["search_stack"] = new_stack;' + '\n' +
  '                }' + '\n' +
  '            }' + '\n' +
  '        }' + '\n' +
  '        if(flag) VARS["search_stack"].push(target);' + '\n' +
  '        //console.log("trying to push hidden id",target,VARS["search_stack"]);' + '\n' +
  '    }' + '\n' +
  '    ' + '\n' +
  '    puzzles.procedures["showMultiple"]();' + '\n' +
  '    if(VARS["search_stack"].length == 1) {' + '\n' +
  '        //console.log("test");' + '\n' +
  '        puzzles.procedures["moveCamera"]();' + '\n' +
  '    } else {' + '\n' +
  '        puzzles.procedures["resetCamera"]();' + '\n' +
  '    }' + '\n' +
  '}' + '\n' +
  '' + '\n' +
  'function listingClickHandler(event, obj_id, isHidden) ' + '\n' +
  '{' + '\n' +
  '    var targetId = event.target.id.replace("id-","");' + '\n' +
  '    var target = {' + '\n' +
  '        "id": targetId,' + '\n' +
  '        "name": VARS["objects_list"][parseInt(obj_id)]' + '\n' +
  '    };' + '\n' +
  '    //VARS["args"] = args;' + '\n' +
  '    ' + '\n' +
  '    // Allow for shift + click to select multiple listings' + '\n' +
  '    var shiftPressed = false;' + '\n' +
  '    var wasClicked = false;' + '\n' +
  '    if(event.type == "click") {' + '\n' +
  '        shiftPressed = event.getModifierState("Shift");' + '\n' +
  '        wasClicked = true;' + '\n' +
  '    }' + '\n' +
  '    if(wasClicked || isHidden) {' + '\n' +
  '        if(isHidden) shiftPressed = true;' + '\n' +
  '        //console.log("listingClickHandler shiftPressed?",shiftPressed,targetId);' + '\n' +
  '        doClick(target, shiftPressed);' + '\n' +
  '    } else {' + '\n' +
  '        //isScroll = document.getElementsByClassName("scrollNone").length > 0;' + '\n' +
  '        if(!isScroll && longTouch) doClick(target, shiftPressed);' + '\n' +
  '    }' + '\n' +
  '}')))(appInstance, v3d, PL, VARS, PROC);

  registerOnClick(model, false, false, [0,1,2], function() {
    if (search_stack.length <= 1) {
      part = _pGlob.pickedObject;
      tweenCamera('', part, 0.5, function() {}, 0);
      args = [];

      Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('var targetId = VARS["part"].split("_")[0];' + '\n' +
      'var obj_id = document.getElementById("id-"+targetId).getAttribute("obj_id");' + '\n' +
      'var args = {' + '\n' +
      '    "id": targetId,' + '\n' +
      '    "name": VARS["objects_list"][parseInt(obj_id)]' + '\n' +
      '};' + '\n' +
      'VARS["args"] = args;')))(appInstance, v3d, PL, VARS, PROC);

      clearSearch();
      search_stack = [args];
      showMultiple();
    }
  }, function() {});

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('var args = VARS["args"];' + '\n' +
  '' + '\n' +
  'for(var a=0;a<args.length;a++) {' + '\n' +
  '    var elem = document.getElementById("id-"+args[a].id);' + '\n' +
  '    elem.addEventListener("mouseover",function(event){' + '\n' +
  '        var targetId = event.target.id.replace("id-","");' + '\n' +
  '        var obj_id = event.target.getAttribute("obj_id");' + '\n' +
  '        var pair = document.getElementById("id-"+targetId).getAttribute("pair");' + '\n' +
  '        var all_objs = document.querySelectorAll(\'[pair="\'+pair+\'"]\');' + '\n' +
  '        //console.log("pair",pair,"all_objs",all_objs);' + '\n' +
  '        if(all_objs.length == 0) {' + '\n' +
  '            var args = {' + '\n' +
  '                "id": targetId,' + '\n' +
  '                "name": VARS["objects_list"][parseInt(obj_id)]' + '\n' +
  '            };' + '\n' +
  '            //console.log("hovering over listing",targetId, obj_id);' + '\n' +
  '            puzzles.procedures["doHover"](args);' + '\n' +
  '        } else {' + '\n' +
  '            //console.log("multiHover",all_objs);' + '\n' +
  '            for(var p=0;p<all_objs.length;p++) {' + '\n' +
  '                targetId = all_objs[p].id;' + '\n' +
  '                var cur_obj_id = all_objs[p].getAttribute("obj_id");' + '\n' +
  '                var args = {' + '\n' +
  '                    "id": targetId,' + '\n' +
  '                    "name": VARS["objects_list"][parseInt(cur_obj_id)]' + '\n' +
  '                };' + '\n' +
  '                //console.log("hovering over listing",targetId, obj_id);' + '\n' +
  '                puzzles.procedures["multiHover"](args);' + '\n' +
  '            }' + '\n' +
  '        }' + '\n' +
  '        /*if(parseInt(targetId) != 0) {' + '\n' +
  '            puzzles.procedures["doHover"](args);' + '\n' +
  '        }*/' + '\n' +
  '    });' + '\n' +
  '    ' + '\n' +
  '    var ann = document.getElementById("an_"+args[a].id);' + '\n' +
  '    //console.log("annot exists?",ann!=null);' + '\n' +
  '    if(ann!=null) {' + '\n' +
  '        ann.addEventListener("mouseover",function(event){' + '\n' +
  '            var targetId = event.target.id.replace("an_","");' + '\n' +
  '            var obj_id = event.target.getElementsByTagName("div")[0].innerHTML;' + '\n' +
  '            var next = document.getElementById("id-"+targetId);' + '\n' +
  '            //console.log(next.id, targetId);' + '\n' +
  '            puzzles.procedures["stopHover"]();' + '\n' +
  '            while (parseInt(next.id.replace("id-","")) == parseInt(targetId)) {' + '\n' +
  '                //console.log(stack,next);' + '\n' +
  '                args = {' + '\n' +
  '                    "id": next.id.replace("id-",""),' + '\n' +
  '                    "name": VARS["objects_list"][parseInt(next.getAttribute("obj_id"))],' + '\n' +
  '                    "isScreen": true' + '\n' +
  '                };' + '\n' +
  '                //stack.push(args);' + '\n' +
  '                next = next.nextSibling;' + '\n' +
  '                puzzles.procedures["multiHover"](args);' + '\n' +
  '            }' + '\n' +
  '        });' + '\n' +
  '        ann.addEventListener("mouseout",function(event){' + '\n' +
  '            puzzles.procedures["stopHover"]();' + '\n' +
  '        });' + '\n' +
  '    }' + '\n' +
  '}')))(appInstance, v3d, PL, VARS, PROC);

  eventHTMLElem('mouseover', 'table-body', false, function(event) {
    isAnimating = true;
  });
  eventHTMLElem('mouseout', 'table-body', false, function(event) {
    stopHover();
  });
  registerOnHover(model, false, function() {
    part = _pGlob.hoveredObject;

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('var target = VARS["part"];' + '\n' +
    'var targetId = target.split("_")[0];' + '\n' +
    'var obj_id = document.getElementById("id-"+targetId);' + '\n' +
    '//console.log("target",target,"obj_id",obj_id,"targetId",targetId);' + '\n' +
    '' + '\n' +
    'if(obj_id != null) {' + '\n' +
    '    obj_id = obj_id.getAttribute("obj_id");' + '\n' +
    '    //console.log(document.getElementById("id-"+targetId));' + '\n' +
    '    var args = {' + '\n' +
    '        "id": targetId,' + '\n' +
    '        "name": VARS["objects_list"][parseInt(obj_id)],' + '\n' +
    '        "isScreen": true' + '\n' +
    '    };' + '\n' +
    '    puzzles.procedures["doHover"](args);' + '\n' +
    '    //console.log(args);' + '\n' +
    '}')))(appInstance, v3d, PL, VARS, PROC);

  }, function() {
    stopHover();
  });
}

// outline puzzle
function outline(objSelector, doWhat) {
    var objNames = PzLib.retrieveObjectNames(objSelector);

    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = PzLib.getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}

// Describe this function...
function doHover(args) {
var VARS = Object.defineProperties({}, {
    'args': { get: function() { return args; }, set: function(val) { args = val; } },
    'i': { get: function() { return i; }, set: function(val) { i = val; } },
    'material': { get: function() { return material; }, set: function(val) { material = val; } },
    'object': { get: function() { return object; }, set: function(val) { object = val; } },
    'property': { get: function() { return property; }, set: function(val) { property = val; } },
    'value': { get: function() { return value; }, set: function(val) { value = val; } },
    'willBeExpanded': { get: function() { return willBeExpanded; }, set: function(val) { willBeExpanded = val; } },
    'isAlpha': { get: function() { return isAlpha; }, set: function(val) { isAlpha = val; } },
    'isAnimating': { get: function() { return isAnimating; }, set: function(val) { isAnimating = val; } },
    'camera_moving': { get: function() { return camera_moving; }, set: function(val) { camera_moving = val; } },
    'isExpanded': { get: function() { return isExpanded; }, set: function(val) { isExpanded = val; } },
    'object_lock': { get: function() { return object_lock; }, set: function(val) { object_lock = val; } },
    'model': { get: function() { return model; }, set: function(val) { model = val; } },
    'search_stack': { get: function() { return search_stack; }, set: function(val) { search_stack = val; } },
    'j': { get: function() { return j; }, set: function(val) { j = val; } },
    'part': { get: function() { return part; }, set: function(val) { part = val; } },
    'isFocused': { get: function() { return isFocused; }, set: function(val) { isFocused = val; } },
    'isIsolated': { get: function() { return isIsolated; }, set: function(val) { isIsolated = val; } },
    'objects_list': { get: function() { return objects_list; }, set: function(val) { objects_list = val; } },
    'alpha_material': { get: function() { return alpha_material; }, set: function(val) { alpha_material = val; } },
    'initialHeight': { get: function() { return initialHeight; }, set: function(val) { initialHeight = val; } },
    'k': { get: function() { return k; }, set: function(val) { k = val; } },
    'materials_list': { get: function() { return materials_list; }, set: function(val) { materials_list = val; } },
    'parts_list': { get: function() { return parts_list; }, set: function(val) { parts_list = val; } },
    'm': { get: function() { return m; }, set: function(val) { m = val; } },
    'annotations': { get: function() { return annotations; }, set: function(val) { annotations = val; } },
    'system_start': { get: function() { return system_start; }, set: function(val) { system_start = val; } },
    'focus_material': { get: function() { return focus_material; }, set: function(val) { focus_material = val; } },
    'hideAnnotations': { get: function() { return hideAnnotations; }, set: function(val) { hideAnnotations = val; } },
    'search_term': { get: function() { return search_term; }, set: function(val) { search_term = val; } },
    'search_found': { get: function() { return search_found; }, set: function(val) { search_found = val; } },
    'anim_speed': { get: function() { return anim_speed; }, set: function(val) { anim_speed = val; } },
    'emptys_list': { get: function() { return emptys_list; }, set: function(val) { emptys_list = val; } },
    'csv_file': { get: function() { return csv_file; }, set: function(val) { csv_file = val; } },
    'file': { get: function() { return file; }, set: function(val) { file = val; } },
    'about_text': { get: function() { return about_text; }, set: function(val) { about_text = val; } },
    'anims_package': { get: function() { return anims_package; }, set: function(val) { anims_package = val; } },
    'soft_load': { get: function() { return soft_load; }, set: function(val) { soft_load = val; } },
    'last_step': { get: function() { return last_step; }, set: function(val) { last_step = val; } },
    'cur_step': { get: function() { return cur_step; }, set: function(val) { cur_step = val; } },
    'start': { get: function() { return start; }, set: function(val) { start = val; } },
    'playInterrupt': { get: function() { return playInterrupt; }, set: function(val) { playInterrupt = val; } },
    'centerOn': { get: function() { return centerOn; }, set: function(val) { centerOn = val; } },
    'canBlurClose': { get: function() { return canBlurClose; }, set: function(val) { canBlurClose = val; } },
    'cameraDist': { get: function() { return cameraDist; }, set: function(val) { cameraDist = val; } },
    'isExpandEnabled': { get: function() { return isExpandEnabled; }, set: function(val) { isExpandEnabled = val; } },
    'end': { get: function() { return end; }, set: function(val) { end = val; } },
    'menuVisible': { get: function() { return menuVisible; }, set: function(val) { menuVisible = val; } },
    'base_material': { get: function() { return base_material; }, set: function(val) { base_material = val; } },
});

  stopHover();
  isAnimating = true;

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('//console.log("doHover",VARS["args"]);' + '\n' +
  '' + '\n' +
  'if(VARS["args"].id) {' + '\n' +
  '    if(VARS["args"].isScreen) {' + '\n' +
  '        var id = document.getElementById("id-" + VARS["args"].id);' + '\n' +
  '        if(id) id.classList.add(\'hover\');   ' + '\n' +
  '    }' + '\n' +
  '    var ann_id = VARS["args"].id;' + '\n' +
  '    var ann = document.getElementById("an_" + ann_id);' + '\n' +
  '    if(parseFloat(ann_id) % 1.0 > 0) {' + '\n' +
  '        ann_id = Math.floor(ann_id) + ".0";' + '\n' +
  '        ann = document.getElementById("an_" + ann_id);' + '\n' +
  '        //ann.style.display = "block";' + '\n' +
  '    }' + '\n' +
  '    if(ann) ann.classList.add(\'hover\');' + '\n' +
  '}')))(appInstance, v3d, PL, VARS, PROC);

  if (isFocused || isIsolated) {
    outline(getEntityByName(dictGet(args, 'name'), 'OBJECT'), 'ENABLE');
    isAnimating = false;
  }
}

// Describe this function...
function multiHover(args) {
var VARS = Object.defineProperties({}, {
    'args': { get: function() { return args; }, set: function(val) { args = val; } },
    'i': { get: function() { return i; }, set: function(val) { i = val; } },
    'material': { get: function() { return material; }, set: function(val) { material = val; } },
    'object': { get: function() { return object; }, set: function(val) { object = val; } },
    'property': { get: function() { return property; }, set: function(val) { property = val; } },
    'value': { get: function() { return value; }, set: function(val) { value = val; } },
    'willBeExpanded': { get: function() { return willBeExpanded; }, set: function(val) { willBeExpanded = val; } },
    'isAlpha': { get: function() { return isAlpha; }, set: function(val) { isAlpha = val; } },
    'isAnimating': { get: function() { return isAnimating; }, set: function(val) { isAnimating = val; } },
    'camera_moving': { get: function() { return camera_moving; }, set: function(val) { camera_moving = val; } },
    'isExpanded': { get: function() { return isExpanded; }, set: function(val) { isExpanded = val; } },
    'object_lock': { get: function() { return object_lock; }, set: function(val) { object_lock = val; } },
    'model': { get: function() { return model; }, set: function(val) { model = val; } },
    'search_stack': { get: function() { return search_stack; }, set: function(val) { search_stack = val; } },
    'j': { get: function() { return j; }, set: function(val) { j = val; } },
    'part': { get: function() { return part; }, set: function(val) { part = val; } },
    'isFocused': { get: function() { return isFocused; }, set: function(val) { isFocused = val; } },
    'isIsolated': { get: function() { return isIsolated; }, set: function(val) { isIsolated = val; } },
    'objects_list': { get: function() { return objects_list; }, set: function(val) { objects_list = val; } },
    'alpha_material': { get: function() { return alpha_material; }, set: function(val) { alpha_material = val; } },
    'initialHeight': { get: function() { return initialHeight; }, set: function(val) { initialHeight = val; } },
    'k': { get: function() { return k; }, set: function(val) { k = val; } },
    'materials_list': { get: function() { return materials_list; }, set: function(val) { materials_list = val; } },
    'parts_list': { get: function() { return parts_list; }, set: function(val) { parts_list = val; } },
    'm': { get: function() { return m; }, set: function(val) { m = val; } },
    'annotations': { get: function() { return annotations; }, set: function(val) { annotations = val; } },
    'system_start': { get: function() { return system_start; }, set: function(val) { system_start = val; } },
    'focus_material': { get: function() { return focus_material; }, set: function(val) { focus_material = val; } },
    'hideAnnotations': { get: function() { return hideAnnotations; }, set: function(val) { hideAnnotations = val; } },
    'search_term': { get: function() { return search_term; }, set: function(val) { search_term = val; } },
    'search_found': { get: function() { return search_found; }, set: function(val) { search_found = val; } },
    'anim_speed': { get: function() { return anim_speed; }, set: function(val) { anim_speed = val; } },
    'emptys_list': { get: function() { return emptys_list; }, set: function(val) { emptys_list = val; } },
    'csv_file': { get: function() { return csv_file; }, set: function(val) { csv_file = val; } },
    'file': { get: function() { return file; }, set: function(val) { file = val; } },
    'about_text': { get: function() { return about_text; }, set: function(val) { about_text = val; } },
    'anims_package': { get: function() { return anims_package; }, set: function(val) { anims_package = val; } },
    'soft_load': { get: function() { return soft_load; }, set: function(val) { soft_load = val; } },
    'last_step': { get: function() { return last_step; }, set: function(val) { last_step = val; } },
    'cur_step': { get: function() { return cur_step; }, set: function(val) { cur_step = val; } },
    'start': { get: function() { return start; }, set: function(val) { start = val; } },
    'playInterrupt': { get: function() { return playInterrupt; }, set: function(val) { playInterrupt = val; } },
    'centerOn': { get: function() { return centerOn; }, set: function(val) { centerOn = val; } },
    'canBlurClose': { get: function() { return canBlurClose; }, set: function(val) { canBlurClose = val; } },
    'cameraDist': { get: function() { return cameraDist; }, set: function(val) { cameraDist = val; } },
    'isExpandEnabled': { get: function() { return isExpandEnabled; }, set: function(val) { isExpandEnabled = val; } },
    'end': { get: function() { return end; }, set: function(val) { end = val; } },
    'menuVisible': { get: function() { return menuVisible; }, set: function(val) { menuVisible = val; } },
    'base_material': { get: function() { return base_material; }, set: function(val) { base_material = val; } },
});

  isAnimating = true;

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('//console.log("multiHover",VARS["args"]);' + '\n' +
  '' + '\n' +
  'if(VARS["args"].id) {' + '\n' +
  '    if(VARS["args"].isScreen) {' + '\n' +
  '        var id = document.getElementById("id-" + VARS["args"].id);' + '\n' +
  '        if(id) id.classList.add(\'hover\');   ' + '\n' +
  '    }' + '\n' +
  '    var ann = document.getElementById("an_" + VARS["args"].id);' + '\n' +
  '    if(ann) ann.classList.add(\'hover\');' + '\n' +
  '}')))(appInstance, v3d, PL, VARS, PROC);

  if (isFocused || isIsolated) {
    outline(getEntityByName(dictGet(args, 'name'), 'OBJECT'), 'ENABLE');
    isAnimating = false;
  }
}

// Describe this function...
function stopHover() {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('var hitable = document.getElementsByClassName("hover item");' + '\n' +
  '' + '\n' +
  'if(hitable.length > 0) {' + '\n' +
  '    hitable[0].classList.remove(\'hover\');' + '\n' +
  '}' + '\n' +
  'var hiann = document.getElementsByClassName("hover v3d-annotation");' + '\n' +
  '' + '\n' +
  'if(hiann.length > 0) {' + '\n' +
  '    hiann[0].classList.remove(\'hover\');' + '\n' +
  '}')))(appInstance, v3d, PL, VARS, PROC);

  if (isFocused || isIsolated) {
    outline(['ALL_OBJECTS'], 'DISABLE');
  }
  isAnimating = false;
}

// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = PzLib.retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = PzLib.getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
        obj.resolveMultiMaterial().forEach(function(objR) {
            objR.visible = bool;
        });
    }
}

// Describe this function...
function showMultiple() {
  if (isIsolated) {
    resetMaterials(true);
    changeVis(model, true);
  }
  if (isFocused) {
    resetMaterials(false);
    if (search_stack.length > 0) {
      changeVis(model, false);
    } else {
      changeVis(model, true);
    }
  }
  for (var k_index in search_stack) {
    let k = search_stack[k_index];
    showObject(k);
  }
}

// Describe this function...
function resetMaterials(isAlpha) {
  var object_end4 = objects_list.length - eval("try { eval('v3d.numMats') } catch(e) { }");
  var object_inc4 = 1;
  if (0 > object_end4) {
    object_inc4 = -object_inc4;
  }
  for (let object = 0; object_inc4 >= 0 ? object <= object_end4 : object >= object_end4; object += object_inc4) {
    if (isAlpha) {
      assignMat(objects_list[object], alpha_material);
    } else {
      assignMat(objects_list[object], materials_list[object]);
    }
  }
}

// Describe this function...
function showObject(args) {
var VARS = Object.defineProperties({}, {
    'args': { get: function() { return args; }, set: function(val) { args = val; } },
    'i': { get: function() { return i; }, set: function(val) { i = val; } },
    'material': { get: function() { return material; }, set: function(val) { material = val; } },
    'object': { get: function() { return object; }, set: function(val) { object = val; } },
    'property': { get: function() { return property; }, set: function(val) { property = val; } },
    'value': { get: function() { return value; }, set: function(val) { value = val; } },
    'willBeExpanded': { get: function() { return willBeExpanded; }, set: function(val) { willBeExpanded = val; } },
    'isAlpha': { get: function() { return isAlpha; }, set: function(val) { isAlpha = val; } },
    'isAnimating': { get: function() { return isAnimating; }, set: function(val) { isAnimating = val; } },
    'camera_moving': { get: function() { return camera_moving; }, set: function(val) { camera_moving = val; } },
    'isExpanded': { get: function() { return isExpanded; }, set: function(val) { isExpanded = val; } },
    'object_lock': { get: function() { return object_lock; }, set: function(val) { object_lock = val; } },
    'model': { get: function() { return model; }, set: function(val) { model = val; } },
    'search_stack': { get: function() { return search_stack; }, set: function(val) { search_stack = val; } },
    'j': { get: function() { return j; }, set: function(val) { j = val; } },
    'part': { get: function() { return part; }, set: function(val) { part = val; } },
    'isFocused': { get: function() { return isFocused; }, set: function(val) { isFocused = val; } },
    'isIsolated': { get: function() { return isIsolated; }, set: function(val) { isIsolated = val; } },
    'objects_list': { get: function() { return objects_list; }, set: function(val) { objects_list = val; } },
    'alpha_material': { get: function() { return alpha_material; }, set: function(val) { alpha_material = val; } },
    'initialHeight': { get: function() { return initialHeight; }, set: function(val) { initialHeight = val; } },
    'k': { get: function() { return k; }, set: function(val) { k = val; } },
    'materials_list': { get: function() { return materials_list; }, set: function(val) { materials_list = val; } },
    'parts_list': { get: function() { return parts_list; }, set: function(val) { parts_list = val; } },
    'm': { get: function() { return m; }, set: function(val) { m = val; } },
    'annotations': { get: function() { return annotations; }, set: function(val) { annotations = val; } },
    'system_start': { get: function() { return system_start; }, set: function(val) { system_start = val; } },
    'focus_material': { get: function() { return focus_material; }, set: function(val) { focus_material = val; } },
    'hideAnnotations': { get: function() { return hideAnnotations; }, set: function(val) { hideAnnotations = val; } },
    'search_term': { get: function() { return search_term; }, set: function(val) { search_term = val; } },
    'search_found': { get: function() { return search_found; }, set: function(val) { search_found = val; } },
    'anim_speed': { get: function() { return anim_speed; }, set: function(val) { anim_speed = val; } },
    'emptys_list': { get: function() { return emptys_list; }, set: function(val) { emptys_list = val; } },
    'csv_file': { get: function() { return csv_file; }, set: function(val) { csv_file = val; } },
    'file': { get: function() { return file; }, set: function(val) { file = val; } },
    'about_text': { get: function() { return about_text; }, set: function(val) { about_text = val; } },
    'anims_package': { get: function() { return anims_package; }, set: function(val) { anims_package = val; } },
    'soft_load': { get: function() { return soft_load; }, set: function(val) { soft_load = val; } },
    'last_step': { get: function() { return last_step; }, set: function(val) { last_step = val; } },
    'cur_step': { get: function() { return cur_step; }, set: function(val) { cur_step = val; } },
    'start': { get: function() { return start; }, set: function(val) { start = val; } },
    'playInterrupt': { get: function() { return playInterrupt; }, set: function(val) { playInterrupt = val; } },
    'centerOn': { get: function() { return centerOn; }, set: function(val) { centerOn = val; } },
    'canBlurClose': { get: function() { return canBlurClose; }, set: function(val) { canBlurClose = val; } },
    'cameraDist': { get: function() { return cameraDist; }, set: function(val) { cameraDist = val; } },
    'isExpandEnabled': { get: function() { return isExpandEnabled; }, set: function(val) { isExpandEnabled = val; } },
    'end': { get: function() { return end; }, set: function(val) { end = val; } },
    'menuVisible': { get: function() { return menuVisible; }, set: function(val) { menuVisible = val; } },
    'base_material': { get: function() { return base_material; }, set: function(val) { base_material = val; } },
});

  isAnimating = true;
  assignMat(getEntityByName(dictGet(args, 'name'), 'OBJECT'), materials_list[objects_list.indexOf(dictGet(args, 'name'))]);
  changeVis(getEntityByName(dictGet(args, 'name'), 'OBJECT'), true);
  if (!isFocused && !isIsolated) {
    outline(['ALL_OBJECTS'], 'DISABLE');
  }
  for (var m_index in annotations) {
    let m = annotations[m_index];
    setHTMLElemStyle('display', 'none', m, false);
    for (var k_index2 in search_stack) {
      let k = search_stack[k_index2];
      if (m == 'an_' + String(dictGet(k, 'id'))) {
        setHTMLElemStyle('display', 'block', m, false);
      }
      outline(getEntityByName(dictGet(k, 'name'), 'OBJECT'), 'ENABLE');
    }
  }
  changeVis(alpha_material, false);

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('var id = document.getElementById("id-" + VARS["args"].id)' + '\n' +
  'if(id)' + '\n' +
  '    id.classList.add(\'hilight\');' + '\n' +
  '/*var ann = document.getElementById("an_" + VARS["args"].id);' + '\n' +
  'if(ann)' + '\n' +
  '    ann.classList.add(\'hilight\');*/' + '\n' +
  '    ' + '\n' +
  'var ann_id = VARS["args"].id;' + '\n' +
  'var ann = document.getElementById("an_" + ann_id);' + '\n' +
  'if(parseFloat(ann_id) % 1.0 > 0) {' + '\n' +
  '    ann_id = Math.floor(ann_id) + ".0";' + '\n' +
  '    ann = document.getElementById("an_" + ann_id);' + '\n' +
  '    ann.style.display = "block";' + '\n' +
  '}' + '\n' +
  'if(ann) ann.classList.add(\'hilight\');')))(appInstance, v3d, PL, VARS, PROC);

  registerSetTimeout(1, function() {
    isAnimating = false;
  });
}

// Describe this function...
function clearSearch() {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('var hover_targets = document.getElementsByClassName("hover").length;' + '\n' +
  'if(hover_targets > 1 || ' + '\n' +
  '    /mobile/i.test(navigator.userAgent) || ' + '\n' +
  '    /ipad|tablet/i.test(navigator.userAgent)) ' + '\n' +
  '    puzzles.procedures["stopHover"]();')))(appInstance, v3d, PL, VARS, PROC);

  console.log('clearing search');
  search_stack = [];
  for (var part_index in parts_list) {
    let part = parts_list[part_index];
  var VARS = Object.defineProperties({}, {
    'args': { get: function() { return args; }, set: function(val) { args = val; } },
    'i': { get: function() { return i; }, set: function(val) { i = val; } },
    'material': { get: function() { return material; }, set: function(val) { material = val; } },
    'object': { get: function() { return object; }, set: function(val) { object = val; } },
    'property': { get: function() { return property; }, set: function(val) { property = val; } },
    'value': { get: function() { return value; }, set: function(val) { value = val; } },
    'willBeExpanded': { get: function() { return willBeExpanded; }, set: function(val) { willBeExpanded = val; } },
    'isAlpha': { get: function() { return isAlpha; }, set: function(val) { isAlpha = val; } },
    'isAnimating': { get: function() { return isAnimating; }, set: function(val) { isAnimating = val; } },
    'camera_moving': { get: function() { return camera_moving; }, set: function(val) { camera_moving = val; } },
    'isExpanded': { get: function() { return isExpanded; }, set: function(val) { isExpanded = val; } },
    'object_lock': { get: function() { return object_lock; }, set: function(val) { object_lock = val; } },
    'model': { get: function() { return model; }, set: function(val) { model = val; } },
    'search_stack': { get: function() { return search_stack; }, set: function(val) { search_stack = val; } },
    'j': { get: function() { return j; }, set: function(val) { j = val; } },
    'part': { get: function() { return part; }, set: function(val) { part = val; } },
    'isFocused': { get: function() { return isFocused; }, set: function(val) { isFocused = val; } },
    'isIsolated': { get: function() { return isIsolated; }, set: function(val) { isIsolated = val; } },
    'objects_list': { get: function() { return objects_list; }, set: function(val) { objects_list = val; } },
    'alpha_material': { get: function() { return alpha_material; }, set: function(val) { alpha_material = val; } },
    'initialHeight': { get: function() { return initialHeight; }, set: function(val) { initialHeight = val; } },
    'k': { get: function() { return k; }, set: function(val) { k = val; } },
    'materials_list': { get: function() { return materials_list; }, set: function(val) { materials_list = val; } },
    'parts_list': { get: function() { return parts_list; }, set: function(val) { parts_list = val; } },
    'm': { get: function() { return m; }, set: function(val) { m = val; } },
    'annotations': { get: function() { return annotations; }, set: function(val) { annotations = val; } },
    'system_start': { get: function() { return system_start; }, set: function(val) { system_start = val; } },
    'focus_material': { get: function() { return focus_material; }, set: function(val) { focus_material = val; } },
    'hideAnnotations': { get: function() { return hideAnnotations; }, set: function(val) { hideAnnotations = val; } },
    'search_term': { get: function() { return search_term; }, set: function(val) { search_term = val; } },
    'search_found': { get: function() { return search_found; }, set: function(val) { search_found = val; } },
    'anim_speed': { get: function() { return anim_speed; }, set: function(val) { anim_speed = val; } },
    'emptys_list': { get: function() { return emptys_list; }, set: function(val) { emptys_list = val; } },
    'csv_file': { get: function() { return csv_file; }, set: function(val) { csv_file = val; } },
    'file': { get: function() { return file; }, set: function(val) { file = val; } },
    'about_text': { get: function() { return about_text; }, set: function(val) { about_text = val; } },
    'anims_package': { get: function() { return anims_package; }, set: function(val) { anims_package = val; } },
    'soft_load': { get: function() { return soft_load; }, set: function(val) { soft_load = val; } },
    'last_step': { get: function() { return last_step; }, set: function(val) { last_step = val; } },
    'cur_step': { get: function() { return cur_step; }, set: function(val) { cur_step = val; } },
    'start': { get: function() { return start; }, set: function(val) { start = val; } },
    'playInterrupt': { get: function() { return playInterrupt; }, set: function(val) { playInterrupt = val; } },
    'centerOn': { get: function() { return centerOn; }, set: function(val) { centerOn = val; } },
    'canBlurClose': { get: function() { return canBlurClose; }, set: function(val) { canBlurClose = val; } },
    'cameraDist': { get: function() { return cameraDist; }, set: function(val) { cameraDist = val; } },
    'isExpandEnabled': { get: function() { return isExpandEnabled; }, set: function(val) { isExpandEnabled = val; } },
    'end': { get: function() { return end; }, set: function(val) { end = val; } },
    'menuVisible': { get: function() { return menuVisible; }, set: function(val) { menuVisible = val; } },
    'base_material': { get: function() { return base_material; }, set: function(val) { base_material = val; } },
});


    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('var hitable = document.getElementsByClassName("hilight item");' + '\n' +
    '' + '\n' +
    'if(hitable.length > 0) {' + '\n' +
    '    hitable[0].classList.remove(\'hilight\');' + '\n' +
    '}' + '\n' +
    '' + '\n' +
    'var hiann = document.getElementsByClassName("hilight v3d-annotation");' + '\n' +
    '' + '\n' +
    'if(hiann.length > 0) {' + '\n' +
    '    hiann[0].classList.remove(\'hilight\');' + '\n' +
    '}')))(appInstance, v3d, PL, VARS, PROC);

  }
}

// Describe this function...
function restoreModel() {
  console.log('restore model');
  clearSearch();
  showMultiple();
  object_lock = false;
  outline(['ALL_OBJECTS'], 'DISABLE');
  for (var m_index2 in annotations) {
    let m = annotations[m_index2];
    setHTMLElemStyle('display', 'block', m, false);
  }

  operateAnimation('PLAY', getAnimations(model), system_start, system_start, 'LoopOnce', 100,
          function() {}, false);

      }

// Describe this function...
function parseCSV() {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('var objects_list = VARS["objects_list"];' + '\n' +
  'var parts_list = VARS["parts_list"];' + '\n' +
  'var cats_list = VARS["cats_list"];' + '\n' +
  '' + '\n' +
  'console.log("objects_list",objects_list);' + '\n' +
  'console.log("parts_list",parts_list);' + '\n' +
  'console.log("cats_list",cats_list);' + '\n' +
  '' + '\n' +
  'var listing = document.getElementById("listing");' + '\n' +
  '' + '\n' +
  'function createListing(origin, part, groupLength) {' + '\n' +
  '    var className = "item _2 w-inline-block";' + '\n' +
  '    var partName;' + '\n' +
  '    var args = [];' + '\n' +
  '    for(var o=0;o<groupLength;o++) ' + '\n' +
  '    {' + '\n' +
  '        var elem = document.createElement("a");' + '\n' +
  '        var item = groupLength>1? part[o]:part;' + '\n' +
  '        //console.log(groupLength, item);' + '\n' +
  '        ' + '\n' +
  '        partName = objects_list[origin+o];' + '\n' +
  '        // removes internal components from the listing' + '\n' +
  '        //if(partName.split("[HIDE]")[1] == "") {' + '\n' +
  '        if(partName.includes("[HIDE]")) {' + '\n' +
  '            className += " hidden";' + '\n' +
  '            elem.setAttribute("pair",origin);' + '\n' +
  '        }' + '\n' +
  '        //if(objects_list[origin+o+1].split("[HIDE]")[1] == "") {' + '\n' +
  '        if(objects_list[origin+o+1].includes("[HIDE]")) {' + '\n' +
  '            elem.setAttribute("pair",origin);' + '\n' +
  '        }' + '\n' +
  '        ' + '\n' +
  '        elem.id = "id-" + partName.split("_")[0];' + '\n' +
  '        elem.setAttribute("class",className);' + '\n' +
  '        elem.setAttribute("obj_id",origin+o);' + '\n' +
  '        ' + '\n' +
  '        inner = "";' + '\n' +
  '        for(var j=0;j<=6;j++) {' + '\n' +
  '            if(j==6) inner += "<div class=\\"columns-wrapper last\\"><div>";' + '\n' +
  '            else inner += "<div class=\\"columns-wrapper\\"><div>";' + '\n' +
  '            ' + '\n' +
  '            if((j!=0) || (j==0 && o==0)) inner += item[j];' + '\n' +
  '            inner += "</div></div>";' + '\n' +
  '            ' + '\n' +
  '            elem.innerHTML = inner;' + '\n' +
  '        }' + '\n' +
  '        ' + '\n' +
  '        listing.appendChild(elem);' + '\n' +
  '        ' + '\n' +
  '        args.push({' + '\n' +
  '            "id": partName.split("_")[0],' + '\n' +
  '            "name": partName' + '\n' +
  '        });' + '\n' +
  '    }' + '\n' +
  '    //console.log(origin, args);' + '\n' +
  '    puzzles.procedures["click listings"](args);' + '\n' +
  '}' + '\n' +
  '    ' + '\n' +
  'function categoryClickHandler(event) {' + '\n' +
  '    puzzles.procedures["clearSearch"]();' + '\n' +
  '    console.log("category listing clicked!",' + '\n' +
  '        event.target.id,' + '\n' +
  '        event.target.getAttribute("start"),' + '\n' +
  '        event.target.getAttribute("end"));' + '\n' +
  '        ' + '\n' +
  '    var start = parseInt(event.target.getAttribute("start"));' + '\n' +
  '    var end = parseInt(event.target.getAttribute("end"));' + '\n' +
  '    var stack = [];' + '\n' +
  '    ' + '\n' +
  '    var objects_list = VARS["objects_list"];' + '\n' +
  '    for(var i=0;i<objects_list.length;i++) {' + '\n' +
  '        var index = objects_list[i].split("_")[0]' + '\n' +
  '        if(parseFloat(index) == start) {' + '\n' +
  '            var k = i;' + '\n' +
  '            while(objects_list[k] !== undefined && parseFloat(index) < end) {' + '\n' +
  '                stack.push({' + '\n' +
  '                    "id": index,' + '\n' +
  '                    "name": objects_list[k++]' + '\n' +
  '                });' + '\n' +
  '                index = objects_list[k].split("_")[0];' + '\n' +
  '            }' + '\n' +
  '            break;' + '\n' +
  '        }' + '\n' +
  '    }' + '\n' +
  '    ' + '\n' +
  '    VARS["search_stack"] = stack;' + '\n' +
  '    puzzles.procedures["showMultiple"]();' + '\n' +
  '    puzzles.procedures["resetCamera"]();' + '\n' +
  '}' + '\n' +
  '' + '\n' +
  'for(var c=0;c<cats_list.length;c++) {' + '\n' +
  '    var cat = cats_list[c];' + '\n' +
  '    var category = document.createElement("span");' + '\n' +
  '    category.setAttribute("class","block item w-inline-block");' + '\n' +
  '    ' + '\n' +
  '    var catid = "cat-" + cat.name.toLowerCase().replace(" ","_");' + '\n' +
  '    var inner = ' + '\n' +
  '    /*"<div " +' + '\n' +
  '        "id=\\"" + catid + "\\" " +' + '\n' +
  '        "class=\\"category\\"" +' + '\n' +
  '        "start=\\"" + cat.start + "\\" " +' + '\n' +
  '        "end=\\"" + cat.end + "\\" " +' + '\n' +
  '    ">" + cat.name + "</div>";*/' + '\n' +
  '    cat.name;' + '\n' +
  '    ' + '\n' +
  '    category.innerHTML = inner;' + '\n' +
  '    category.id = catid;' + '\n' +
  '    category.classList.add("category");' + '\n' +
  '    category.setAttribute("start",Math.ceil(cat.start));' + '\n' +
  '    category.setAttribute("end",Math.ceil(cat.end));' + '\n' +
  '    ' + '\n' +
  '    // HANDLE Category Clicking' + '\n' +
  '    listing.appendChild(category);' + '\n' +
  '    category.addEventListener("click",categoryClickHandler,false);' + '\n' +
  '    category.addEventListener("touchstart",categoryClickHandler,false);' + '\n' +
  '    ' + '\n' +
  '    console.log("new category");' + '\n' +
  '    for(var o=cat.start+(c-1);o<cat.end;o++) {' + '\n' +
  '        var obj = objects_list[o];' + '\n' +
  '        //var part = parts_list[o-c-1]; // <-- the problem is around here!' + '\n' +
  '        ' + '\n' +
  '        if(obj !== undefined) {' + '\n' +
  '            var index = parseInt(obj.split("_")[0])-1;' + '\n' +
  '            var part = parts_list[index];' + '\n' +
  '            ' + '\n' +
  '            //console.log(index, part);' + '\n' +
  '            ' + '\n' +
  '            if(!Array.isArray(part[0]))' + '\n' +
  '                //createListing(origin, part, groupLength)' + '\n' +
  '                createListing(o, part, 1);' + '\n' +
  '            else {' + '\n' +
  '                createListing(o, part, part.length);' + '\n' +
  '                o+=part.length-1; // don\'t make duplicates from children' + '\n' +
  '            }' + '\n' +
  '        }' + '\n' +
  '    }' + '\n' +
  '}')))(appInstance, v3d, PL, VARS, PROC);

}

// Describe this function...
function readContent(file) {
var VARS = Object.defineProperties({}, {
    'args': { get: function() { return args; }, set: function(val) { args = val; } },
    'i': { get: function() { return i; }, set: function(val) { i = val; } },
    'material': { get: function() { return material; }, set: function(val) { material = val; } },
    'object': { get: function() { return object; }, set: function(val) { object = val; } },
    'property': { get: function() { return property; }, set: function(val) { property = val; } },
    'value': { get: function() { return value; }, set: function(val) { value = val; } },
    'willBeExpanded': { get: function() { return willBeExpanded; }, set: function(val) { willBeExpanded = val; } },
    'isAlpha': { get: function() { return isAlpha; }, set: function(val) { isAlpha = val; } },
    'isAnimating': { get: function() { return isAnimating; }, set: function(val) { isAnimating = val; } },
    'camera_moving': { get: function() { return camera_moving; }, set: function(val) { camera_moving = val; } },
    'isExpanded': { get: function() { return isExpanded; }, set: function(val) { isExpanded = val; } },
    'object_lock': { get: function() { return object_lock; }, set: function(val) { object_lock = val; } },
    'model': { get: function() { return model; }, set: function(val) { model = val; } },
    'search_stack': { get: function() { return search_stack; }, set: function(val) { search_stack = val; } },
    'j': { get: function() { return j; }, set: function(val) { j = val; } },
    'part': { get: function() { return part; }, set: function(val) { part = val; } },
    'isFocused': { get: function() { return isFocused; }, set: function(val) { isFocused = val; } },
    'isIsolated': { get: function() { return isIsolated; }, set: function(val) { isIsolated = val; } },
    'objects_list': { get: function() { return objects_list; }, set: function(val) { objects_list = val; } },
    'alpha_material': { get: function() { return alpha_material; }, set: function(val) { alpha_material = val; } },
    'initialHeight': { get: function() { return initialHeight; }, set: function(val) { initialHeight = val; } },
    'k': { get: function() { return k; }, set: function(val) { k = val; } },
    'materials_list': { get: function() { return materials_list; }, set: function(val) { materials_list = val; } },
    'parts_list': { get: function() { return parts_list; }, set: function(val) { parts_list = val; } },
    'm': { get: function() { return m; }, set: function(val) { m = val; } },
    'annotations': { get: function() { return annotations; }, set: function(val) { annotations = val; } },
    'system_start': { get: function() { return system_start; }, set: function(val) { system_start = val; } },
    'focus_material': { get: function() { return focus_material; }, set: function(val) { focus_material = val; } },
    'hideAnnotations': { get: function() { return hideAnnotations; }, set: function(val) { hideAnnotations = val; } },
    'search_term': { get: function() { return search_term; }, set: function(val) { search_term = val; } },
    'search_found': { get: function() { return search_found; }, set: function(val) { search_found = val; } },
    'anim_speed': { get: function() { return anim_speed; }, set: function(val) { anim_speed = val; } },
    'emptys_list': { get: function() { return emptys_list; }, set: function(val) { emptys_list = val; } },
    'csv_file': { get: function() { return csv_file; }, set: function(val) { csv_file = val; } },
    'file': { get: function() { return file; }, set: function(val) { file = val; } },
    'about_text': { get: function() { return about_text; }, set: function(val) { about_text = val; } },
    'anims_package': { get: function() { return anims_package; }, set: function(val) { anims_package = val; } },
    'soft_load': { get: function() { return soft_load; }, set: function(val) { soft_load = val; } },
    'last_step': { get: function() { return last_step; }, set: function(val) { last_step = val; } },
    'cur_step': { get: function() { return cur_step; }, set: function(val) { cur_step = val; } },
    'start': { get: function() { return start; }, set: function(val) { start = val; } },
    'playInterrupt': { get: function() { return playInterrupt; }, set: function(val) { playInterrupt = val; } },
    'centerOn': { get: function() { return centerOn; }, set: function(val) { centerOn = val; } },
    'canBlurClose': { get: function() { return canBlurClose; }, set: function(val) { canBlurClose = val; } },
    'cameraDist': { get: function() { return cameraDist; }, set: function(val) { cameraDist = val; } },
    'isExpandEnabled': { get: function() { return isExpandEnabled; }, set: function(val) { isExpandEnabled = val; } },
    'end': { get: function() { return end; }, set: function(val) { end = val; } },
    'menuVisible': { get: function() { return menuVisible; }, set: function(val) { menuVisible = val; } },
    'base_material': { get: function() { return base_material; }, set: function(val) { base_material = val; } },
});


  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('var file = VARS["file"];' + '\n' +
  'var inner = "";' + '\n' +
  'for(var r in file) {' + '\n' +
  '    var row = file[r];' + '\n' +
  '    if(row.length == 1) {' + '\n' +
  '        inner += "<div class=\\"row section\\">"+row[0]+"</div>";' + '\n' +
  '    } else if(row.length == 4) {' + '\n' +
  '        inner += "<div class=\\"row\\">"+' + '\n' +
  '            "<div class=\\"column\\"><b>"+row[1]+"</b></div>"+' + '\n' +
  '            "<div class=\\"column\\"><b>"+row[2]+"</b></div>"+' + '\n' +
  '            "<div class=\\"column\\"><b>"+row[3]+"</b></div>"+' + '\n' +
  '            "</div>";' + '\n' +
  '    } else {' + '\n' +
  '        inner += "<div class=\\"row\\">"+' + '\n' +
  '            "<div class=\\"column\\">"+row[0]+"</div>"+' + '\n' +
  '            "<div class=\\"column\\">"+' + '\n' +
  '                "<a href=\\""+row[1]+"\\" target=\\"_blank\\">"+' + '\n' +
  '                    "Visit "+row[0]+' + '\n' +
  '                "</a>"+' + '\n' +
  '            "</div>"+' + '\n' +
  '            "<div class=\\"column\\">"+row[2]+"</div>"+' + '\n' +
  '            "</div>";' + '\n' +
  '    }' + '\n' +
  '}' + '\n' +
  '' + '\n' +
  'var elem = document.getElementById("links-wrapper");' + '\n' +
  'elem = elem.getElementsByClassName("info")[0];' + '\n' +
  '' + '\n' +
  'elem.innerHTML = inner;')))(appInstance, v3d, PL, VARS, PROC);

}

// Describe this function...
function hideAnnotations2() {
  hideAnnotations = true;

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('console.log("attempting to hide annotations");' + '\n' +
  '' + '\n' +
  'document.getElementById("annotations-button").classList.remove(\'hilight\');' + '\n' +
  '' + '\n' +
  'var ann = document.getElementsByClassName("v3d-annotation");' + '\n' +
  'for(var i=0;i<ann.length;i++) {' + '\n' +
  '    ann[i].classList.add(\'hide\');' + '\n' +
  '}')))(appInstance, v3d, PL, VARS, PROC);

}

// getHTMLElemStyle puzzle
function getHTMLElemStyle(prop, id, isParent) {
    var elem = PzLib.getElement(id, isParent);

    // try explicitly set style first
    if (elem && elem.style && elem.style[prop]) {
        return elem.style[prop];
    } else if (elem) {
        var win = isParent ? window.parent : window;
        return win.getComputedStyle(elem)[prop];
    } else
        return '';
}

// zoomCamera puzzle
function zoomCamera(objSelector, duration, doSlot) {

    duration = Math.max(0, duration);

    const objNames = PzLib.retrieveObjectNames(objSelector);

    const zoomObjects = [];
    objNames.forEach(function(name) {
        const obj = PzLib.getObjectByName(name);
        if (obj) {
            zoomObjects.push(obj);
        }
    });

    if (!zoomObjects.length) {
        return;
    }

    const camera = appInstance.getCamera();

    const zoom = [camera.zoom]; // for orthographic camera only

    const pos = _pGlob.vec3Tmp, target = _pGlob.vec3Tmp2;
    v3d.CameraUtils.calcCameraZoomToObjectsParams(camera, zoomObjects,
            pos, target, zoom);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            if (camera.isOrthographicCamera) {
                appInstance.controls.tweenZoomTo(target, zoom[0],
                        duration, doSlot);
            } else {
                appInstance.controls.tween(pos, target, duration, doSlot);
            }
        }
    } else {
        // TODO: static camera, just position it for now
        if (camera.parent) {
            camera.parent.worldToLocal(pos);
        }
        camera.position.copy(pos);
        camera.lookAt(target);
        camera.zoom = zoom[0];
        camera.updateProjectionMatrix();
        doSlot();
    }
}

// Describe this function...
function resetCamera() {
  zoomCamera(model, 0.5, function() {});
  console.log('reset camera');
}

// Describe this function...
function moveCamera() {
  centerOn = 0;

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('var objects_list = VARS["objects_list"];' + '\n' +
  'var stack = VARS["search_stack"];' + '\n' +
  'var centerOn = objects_list[stack[0].id];' + '\n' +
  '' + '\n' +
  'VARS["centerOn"] = centerOn;')))(appInstance, v3d, PL, VARS, PROC);

  tweenCamera('', centerOn, 0.5, function() {}, 0);
  console.log('move camera');
}

// Describe this function...
function handleNav() {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('var navs = ["about-btn","controls-btn","links-btn",' + '\n' +
  '            "about-btn2","controls-btn2","links-btn2"];' + '\n' +
  'var closes = ["about-close-btn","controls-close-btn","links-close-btn"];' + '\n' +
  '' + '\n' +
  'for(var i=0;i<navs.length;i++) {' + '\n' +
  '    var nav = navs[i];' + '\n' +
  '    var elem = document.getElementById(nav);' + '\n' +
  '    elem.addEventListener("click",function(event) {' + '\n' +
  '' + '\n' +
  '        for(var i=0;i<navs.length;i++) {' + '\n' +
  '            var n = navs[i];' + '\n' +
  '            document.getElementById(n).classList.remove("w--current");' + '\n' +
  '        }' + '\n' +
  '        event.target.classList.add("w--current");' + '\n' +
  '        ' + '\n' +
  '        puzzles.procedures["closeTabs"]();' + '\n' +
  '        document.getElementById(event.target.id.split("-")[0] + "-wrapper")' + '\n' +
  '                    .style.display = "block";' + '\n' +
  '    });' + '\n' +
  '}' + '\n' +
  '' + '\n' +
  'for(var i=0;i<closes.length;i++) {' + '\n' +
  '    var close = closes[i];' + '\n' +
  '    var elem = document.getElementById(close);' + '\n' +
  '    elem.addEventListener("click",function(event) {' + '\n' +
  '        ' + '\n' +
  '        for(var j=0;j<navs.length;j++) {' + '\n' +
  '            var nav = navs[j];' + '\n' +
  '            document.getElementById(nav).classList.remove("w--current");' + '\n' +
  '        }' + '\n' +
  '        puzzles.procedures["closeTabs"]();' + '\n' +
  '    });' + '\n' +
  '}')))(appInstance, v3d, PL, VARS, PROC);

}

// removeTimer puzzle
function registerRemoveTimer(id) {
    if (id in _pGlob.intervalTimers) {
        window.clearInterval(_pGlob.intervalTimers[id]);
    }
}

// setTimer puzzle
function registerSetTimer(id, timeout, callback, repeat) {

    if (id in _pGlob.intervalTimers) {
        window.clearInterval(_pGlob.intervalTimers[id]);
    }

    _pGlob.intervalTimers[id] = window.setInterval(function() {
        if (repeat-- > 0) {
            callback(_pGlob.intervalTimers[id]);
        }
    }, 1000 * timeout);
}

// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = PzLib.getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}

// getHTMLElemAttribute puzzle
function getHTMLElemAttribute(attr, id, isParent) {
    var elem = PzLib.getElement(id, isParent);
    return elem ? elem[attr]: '';
}

// Describe this function...
function doSearch() {
  clearSearch();
  search_term = getHTMLElemAttribute('value', 'search-box', false);
  search_stack = [];
  search_found = false;

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('var list = VARS["parts_list"];' + '\n' +
  'var term = VARS["search_term"];' + '\n' +
  'var wasFound = VARS["search_found"];' + '\n' +
  'var stack = []; ' + '\n' +
  'var index;' + '\n' +
  'var clear = document.getElementById("clear");' + '\n' +
  '' + '\n' +
  'if(term != "" && (term.match(/ /g) || []).length != term.length) ' + '\n' +
  '{' + '\n' +
  '    while (term[0] == " ") term = term.substring(1,term.length);' + '\n' +
  '    while (term[term.length-1] == " ") term = term.substring(0,term.length-1);' + '\n' +
  '    ' + '\n' +
  '    clear.classList.remove("hide");' + '\n' +
  '    for(var part in list) {' + '\n' +
  '        if(list[part] !== undefined) ' + '\n' +
  '        {' + '\n' +
  '            var search = list[part].filter(' + '\n' +
  '                entry => entry.toString().toLowerCase()' + '\n' +
  '                            .indexOf(term.toLowerCase()) >= 0' + '\n' +
  '            );' + '\n' +
  '            if(search.length > 0) {' + '\n' +
  '                //console.log(search, list[part]);' + '\n' +
  '                for(var a=0;a<list[part].length;a++) ' + '\n' +
  '                {' + '\n' +
  '                    if(Object.prototype.toString.call(list[part][0]) === \'[object Array]\') {' + '\n' +
  '                        index = list[part][a][0];' + '\n' +
  '                        if(index == parseInt(index)) index = index+".0";' + '\n' +
  '                    } else' + '\n' +
  '                        index = list[part][0];' + '\n' +
  '                        ' + '\n' +
  '                    curname = VARS["objects_list"].filter(' + '\n' +
  '                        obj => obj.toString().split("_")[0].indexOf(index) >= 0' + '\n' +
  '                    )[0];' + '\n' +
  '                    //index = VARS["objects_list"][part].split("_")[0];' + '\n' +
  '                    //console.log(index,VARS["objects_list"][part]);' + '\n' +
  '                    stack.push({' + '\n' +
  '                        "id": index,' + '\n' +
  '                        "name": curname' + '\n' +
  '                    });' + '\n' +
  '                }' + '\n' +
  '                wasFound = true;' + '\n' +
  '            }' + '\n' +
  '        }' + '\n' +
  '    }' + '\n' +
  '} else {' + '\n' +
  '    clear.classList.add("hide");' + '\n' +
  '}' + '\n' +
  '' + '\n' +
  '//console.log("search results:",stack);' + '\n' +
  '' + '\n' +
  'VARS["search_stack"] = stack;' + '\n' +
  'VARS["search_found"] = wasFound;')))(appInstance, v3d, PL, VARS, PROC);

  if (search_found) {
    showMultiple();
    resetCamera();
  } else {
    restoreModel();
  }
}


setCameraParam('KEYBOARD_CONTROLS', 'Camera', false);
whenMoved(getActiveCamera(), 0.01, function() {
  camera_moving = true;
}, function() {}, function() {
  camera_moving = false;
});
registerEveryFrame(function() {
  if (camera_moving == true || isAnimating == true) {
    enableRendering();
  } else {
    disableRendering(true);
  }
});
/* Let's just make sure that it never gets stuck for too long */
registerInterval(2, function() {
  if (camera_moving == false || isAnimating == false) {
    enableRendering();
    registerSetTimeout(0.5, function() {
      disableRendering(true);
    });
  }
});
annotations = [];
hideAnnotations = false;
isAnimating = false;
isExpanded = false;
isIsolated = false;
isFocused = true;
search_term = '';
search_stack = [];
search_found = false;
anim_speed = 6;
// be sure to change this for each project!
model = ['GROUP', eval("try { eval('v3d.projectname') } catch(e) { }").toUpperCase()];
objects_list = getObjectsFrom(model[1], 'ALL');
emptys_list = getObjectsFrom(['GROUP', 'Annotations'], 'ALL');
materials_list = [];
object_lock = false;

Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('// Save materials in Verge3D for later use' + '\n' +
'VARS["focus_material"] = v3d.materials.alpha; // change this to focus' + '\n' +
'VARS["alpha_material"] = v3d.materials.alpha;' + '\n' +
'VARS["base_material"] = v3d.materials.base;' + '\n' +
'' + '\n' +
'var mat_objs = v3d.materials;' + '\n' +
'for(var mat in mat_objs) {' + '\n' +
'    puzzles.procedures["setMaterialObj"](' + '\n' +
'        mat_objs[mat], mat_objs[mat], "Value",' + '\n' +
'        (mat=="alpha")?0.1:1' + '\n' +
'    );' + '\n' +
'}')))(appInstance, v3d, PL, VARS, PROC);

csv_file = ['./',model[1].toLowerCase(),'.csv'].join('');
loadFile('./links.csv', function() {
  readContent(readCSV(_pGlob.loadedFile, ',', 0));
}, function() {}, true);
loadFile('./about.txt', function() {
  about_text = _pGlob.loadedFile;

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('document.getElementById("customer-information").innerHTML = VARS["about_text"];' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

}, function() {}, true);
loadFile(csv_file, function() {
  objects_list = getObjectsFrom(['ALL_OBJECTS'], 'MESH');
  soft_load = readCSV(_pGlob.loadedFile, ',', 0);

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('// Clean objects_list' + '\n' +
  'var objects = VARS["objects_list"];' + '\n' +
  '' + '\n' +
  '// Bubble sort Implementation using JavaScript' + '\n' +
  '' + '\n' +
  '// Creating the bblSort function' + '\n' +
  'function bblSort(orig) {' + '\n' +
  '    var arr = orig;' + '\n' +
  '' + '\n' +
  '    for (var i = 0; i < arr.length; i++) {' + '\n' +
  '        ' + '\n' +
  '        var index_i = parseFloat(arr[i].split("_")[0]);' + '\n' +
  '        ' + '\n' +
  '        // Last i elements are already in place  ' + '\n' +
  '        for (var j = 0; j < (arr.length - i - 1); j++) {' + '\n' +
  '            ' + '\n' +
  '            var index_j = parseFloat(arr[j].split("_")[0]);' + '\n' +
  '            ' + '\n' +
  '            if(index_i !== undefined && index_j !== undefined) {' + '\n' +
  '                ' + '\n' +
  '            }' + '\n' +
  '            ' + '\n' +
  '            var index_j2 = parseFloat(arr[j+1].split("_")[0]);' + '\n' +
  '' + '\n' +
  '            // Checking if the item at present iteration ' + '\n' +
  '            // is greater than the next iteration' + '\n' +
  '            if (index_j > index_j2) {' + '\n' +
  '' + '\n' +
  '                // If the condition is true' + '\n' +
  '                // then swap them' + '\n' +
  '                var temp = arr[j]' + '\n' +
  '                arr[j] = arr[j + 1]' + '\n' +
  '                arr[j + 1] = temp' + '\n' +
  '            }' + '\n' +
  '        }' + '\n' +
  '    }' + '\n' +
  '' + '\n' +
  '    //return ([undefined]).concat(arr);' + '\n' +
  '    return arr;' + '\n' +
  '}' + '\n' +
  '' + '\n' +
  'objects = bblSort(objects);' + '\n' +
  'VARS["objects_list"] = objects;' + '\n' +
  '' + '\n' +
  '// create annotations' + '\n' +
  'for(var obj=0;obj<objects.length;obj++) {' + '\n' +
  '//for(var obj=0;obj<2;obj++) {' + '\n' +
  '    ' + '\n' +
  '    var obj_id = obj;' + '\n' +
  '    var object = objects[obj];' + '\n' +
  '    var index = object.split("_")[0];' + '\n' +
  '    var isHidden = object.includes("[HIDE]");' + '\n' +
  '    //console.log(index, parseFloat(index)%1);' + '\n' +
  '    ' + '\n' +
  '    if(!isNaN(index) && parseFloat(index) % 1 == 0 && !isHidden) ' + '\n' +
  '    {' + '\n' +
  '        //console.log("creating annotation","an_"+index,obj_id,object);' + '\n' +
  '        ' + '\n' +
  '        //VARS["index"] = parseInt(index);' + '\n' +
  '        ' + '\n' +
  '        var annot = {' + '\n' +
  '            "name": parseFloat(index),' + '\n' +
  '            "object": object+"_annot",' + '\n' +
  '            "id": "an_"+index,' + '\n' +
  '            "obj_id": obj_id' + '\n' +
  '        };' + '\n' +
  '        //if(parseFloat(index)==1) console.log("annotation",parseInt(index)-1,annot,VARS["annotations"]);' + '\n' +
  '        ' + '\n' +
  '        puzzles.procedures["handleAnnot"](annot);' + '\n' +
  '        ' + '\n' +
  '        //console.log("annotations index", parseInt(index)-1);' + '\n' +
  '        VARS["annotations"][parseInt(index)-1] = "an_"+index;' + '\n' +
  '    }' + '\n' +
  '}' + '\n' +
  'VARS["hideAnnotations"] = false;' + '\n' +
  '' + '\n' +
  'var materials = VARS["materials_list"];' + '\n' +
  'for(var i=0;i<objects.length;i++) {' + '\n' +
  '    materials[i] = puzzles.procedures["getMaterial"](objects[i]);' + '\n' +
  '}' + '\n' +
  'console.log("materials_list",materials);' + '\n' +
  'VARS["materials_list"] = materials;' + '\n' +
  '' + '\n' +
  '/*-----------------*/' + '\n' +
  '' + '\n' +
  '// Separate parts_list and cats_list from CSV' + '\n' +
  'var soft_load = VARS["soft_load"];' + '\n' +
  'var parts_list = [];' + '\n' +
  'var cats_list = [];' + '\n' +
  '' + '\n' +
  '//console.log("soft_load",soft_load);' + '\n' +
  '' + '\n' +
  'var k = -1; // category' + '\n' +
  'var s = 0; // skip' + '\n' +
  'var c = 0; // children' + '\n' +
  '' + '\n' +
  'var base = 0;' + '\n' +
  'for(var p=0;p<soft_load.length;p++) ' + '\n' +
  '{' + '\n' +
  '    var obj = soft_load[p];' + '\n' +
  '    //console.log(obj[0]);' + '\n' +
  '    ' + '\n' +
  '    if(obj[0] == "title") ' + '\n' +
  '    {' + '\n' +
  '        // Set the end of the last category length' + '\n' +
  '        //if(p>0) cats_list[k].end = soft_load[p-1][0];' + '\n' +
  '        ' + '\n' +
  '        var start = p==soft_load.length-1?' + '\n' +
  '            soft_load.length-1:base+1;' + '\n' +
  '        var end = 0;' + '\n' +
  '        //if(k!=0) end = parseInt(soft_load[cats_list[k].end][0]);' + '\n' +
  '        ' + '\n' +
  '        // Set previous category length' + '\n' +
  '        var j = p; do { j--;' + '\n' +
  '            if(k!=-1) cats_list[k].end = soft_load[j][0];' + '\n' +
  '        } while (soft_load[j] !== undefined && soft_load[j][0] == "skip");' + '\n' +
  '        ' + '\n' +
  '        cats_list.push({' + '\n' +
  '            "name":obj[1],' + '\n' +
  '            "start":start,' + '\n' +
  '            "end":end' + '\n' +
  '        });' + '\n' +
  '        ' + '\n' +
  '        k++;' + '\n' +
  '    } else if (obj[0] == "skip") {' + '\n' +
  '        parts_list.push(undefined);' + '\n' +
  '        s++;' + '\n' +
  '        ' + '\n' +
  '    } else if (!Number.isInteger(obj[0])) {' + '\n' +
  '        ' + '\n' +
  '        var children = [];' + '\n' +
  '        children.push(soft_load[base+c+k]);' + '\n' +
  '        children.push(obj);' + '\n' +
  '        c++;' + '\n' +
  '        ' + '\n' +
  '        //console.log("base",base,"next",soft_load[p+1][0]);' + '\n' +
  '        ' + '\n' +
  '        while(parseInt(soft_load[p+1][0]) == base && ' + '\n' +
  '                p+1 < soft_load.length) {' + '\n' +
  '            p++;' + '\n' +
  '            c++;' + '\n' +
  '            obj = soft_load[p];' + '\n' +
  '            children.push(obj);' + '\n' +
  '        }' + '\n' +
  '        ' + '\n' +
  '        parts_list[base-1] = children;' + '\n' +
  '        ' + '\n' +
  '    } else {' + '\n' +
  '        base = obj[0];' + '\n' +
  '        parts_list.push(obj);' + '\n' +
  '    }' + '\n' +
  '}' + '\n' +
  '' + '\n' +
  '// Set the end of the last category length' + '\n' +
  'cats_list[k].end = Math.ceil(soft_load[soft_load.length-1][0])+1;' + '\n' +
  '' + '\n' +
  '//console.log(parts_list);' + '\n' +
  '' + '\n' +
  'VARS["parts_list"] = parts_list;' + '\n' +
  'VARS["cats_list"] = cats_list;')))(appInstance, v3d, PL, VARS, PROC);

  parseCSV();
}, function() {}, true);
anims_package = eval("try { eval('anims_file_transport') } catch(e) { }");
last_step = -1;
cur_step = 0;
start = 0;
playInterrupt = false;

Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('var objects_list = VARS["objects_list"];' + '\n' +
'var anims_object = VARS["anims_package"];' + '\n' +
'var objects_list = [];' + '\n' +
'handleAnims(objects_list, ' + '\n' +
'    mergeJSON(textToJSON(' + '\n' +
'        document.getElementsByTagName("object")[0]' + '\n' +
'        .contentDocument.body.innerHTML' + '\n' +
'    ), ' + '\n' +
'anims_object));' + '\n' +
'' + '\n' +
'//document.getElementById("cop-section").style.display = "none"; // hide on startup' + '\n' +
'' + '\n' +
'// combines CP3 animations array with User Defined animations info array' + '\n' +
'function mergeJSON(temp, anims_package) {' + '\n' +
'    var anims = anims_package;' + '\n' +
'    ' + '\n' +
'    //console.log(v3d.cp3license.limits);' + '\n' +
'    ' + '\n' +
'    for(var i=0;i<anims_package.user.length;i++) {' + '\n' +
'        if(temp[i]!==undefined) {' + '\n' +
'            anims.user[i].fx = temp[i].fx;' + '\n' +
'            for(var j=0;j<anims.user[i].steps.length;j++) {' + '\n' +
'                if(temp[i].steps[j]!==undefined) {' + '\n' +
'                    anims.user[i].steps[j].title = temp[i].steps[j].title;' + '\n' +
'                    anims.user[i].steps[j].text  = temp[i].steps[j].text;' + '\n' +
'                } else {' + '\n' +
'                    anims.user[i].steps[j].title = "Missing Title";' + '\n' +
'                    anims.user[i].steps[j].text  = "Missing Body Text";' + '\n' +
'                }' + '\n' +
'                if(j >= v3d.cp3license.limits[i]) {' + '\n' +
'                    anims.user[i].steps[j].title = "ERROR";' + '\n' +
'                    anims.user[i].steps[j].text  = "ERROR";' + '\n' +
'                    anims.user[i].steps[j].alpha = [];' + '\n' +
'                    anims.user[i].steps[j].focus = [];' + '\n' +
'                }' + '\n' +
'            }' + '\n' +
'        } else {' + '\n' +
'            anims.user[i].fx = "ERROR";' + '\n' +
'        }' + '\n' +
'        if(i >= v3d.cp3license.limits.length) {' + '\n' +
'            anims.user[i].fx = "ERROR";' + '\n' +
'            anims.user[i].steps = [];' + '\n' +
'        }' + '\n' +
'    }' + '\n' +
'' + '\n' +
'    VARS["anims_package"] = anims;' + '\n' +
'    console.log("anims_package",anims);' + '\n' +
'' + '\n' +
'    return anims;' + '\n' +
'}' + '\n' +
'' + '\n' +
'function textToJSON(text) {' + '\n' +
'    text = text.substring(' + '\n' +
'        text.indexOf("<cycle>")+("<cycle>").length,' + '\n' +
'        text.indexOf("</cycle>")' + '\n' +
'    );' + '\n' +
'    var operations = [];' + '\n' +
'    while(text.indexOf("<operation>")!=-1) {' + '\n' +
'        var temp = text.substring(' + '\n' +
'            text.indexOf("<operation>"),' + '\n' +
'            text.indexOf("</operation>")+("<operation>").length+1' + '\n' +
'        );' + '\n' +
'        var tab_name = temp.substring(' + '\n' +
'            temp.indexOf("<tab-name>")+("<tab-name>").length,' + '\n' +
'            temp.indexOf("</tab-name>")' + '\n' +
'        );' + '\n' +
'        var steps = [];' + '\n' +
'        while(temp.indexOf("<step>")!=-1) {' + '\n' +
'            steps.push({' + '\n' +
'                "title": temp.substring(' + '\n' +
'                    temp.indexOf("<title>")+("<title>").length,' + '\n' +
'                    temp.indexOf("</title>")' + '\n' +
'                ),' + '\n' +
'                "text": temp.substring(' + '\n' +
'                    temp.indexOf("<text>")+("<text>").length,' + '\n' +
'                    temp.indexOf("</text>")' + '\n' +
'                )' + '\n' +
'            });' + '\n' +
'            temp = temp.replace(' + '\n' +
'                temp.substring(' + '\n' +
'                    temp.indexOf("<step>"),' + '\n' +
'                    temp.indexOf("</step>")+("<step>").length+1' + '\n' +
'                ),"");' + '\n' +
'        }' + '\n' +
'        operations.push({' + '\n' +
'            "fx": tab_name,' + '\n' +
'            "steps": steps' + '\n' +
'        });' + '\n' +
'        text = text.replace(' + '\n' +
'            text.substring(' + '\n' +
'                text.indexOf("<operation>"),' + '\n' +
'                text.indexOf("</operation>")+("<operation>").length+1' + '\n' +
'            ),"");' + '\n' +
'    }' + '\n' +
'' + '\n' +
'    return operations;' + '\n' +
'}' + '\n' +
'' + '\n' +
'function handleAnims(objects_list, anims_package) {' + '\n' +
'    const playbar = document.getElementById("playbar").getElementsByTagName("input")[0];' + '\n' +
'    const playpause = document.getElementById("play-pause");' + '\n' +
'    const frwd = document.getElementById("skip-10");' + '\n' +
'    const bkwrd = document.getElementById("skipminus-10");' + '\n' +
'    const currentTimeRef = document.getElementById("current-time");' + '\n' +
'    const maxDuration = document.getElementById("max-duration");' + '\n' +
'' + '\n' +
'    var frames = 500;' + '\n' +
'    const max = 100;' + '\n' +
'    var step = max / frames; // step = max / frames' + '\n' +
'    const interval = 10; // ms per frame' + '\n' +
'    const timeFormatter = (timeInput) => {' + '\n' +
'        let second = Math.floor((timeInput/1000) % 60);' + '\n' +
'        second = second < 10 ? "0" + second : second;' + '\n' +
'        let millis = Math.floor(timeInput % 1000);' + '\n' +
'        //let millis = Math.floor((timeInput/1000) % 60);' + '\n' +
'        millis = millis < 10 ? "0" + millis : millis;' + '\n' +
'        //millis = millis < 100 ? millis + "0" : millis;' + '\n' +
'        //millis = String(millis).substring(0,3);' + '\n' +
'        millis = String(millis).substring(0,2);' + '\n' +
'        return `${second}:${millis}`;' + '\n' +
'    };' + '\n' +
'' + '\n' +
'    var playpauseClick, frwdClick, bkwrdClick;' + '\n' +
'    var cop_section = document.getElementById("cop-section-mlpt");' + '\n' +
'    var flex_block = cop_section.getElementsByClassName("step-tabs")[0];' + '\n' +
'    var tabs = flex_block.getElementsByTagName("div");' + '\n' +
'    var text_area = cop_section.getElementsByClassName("text-area")[0];' + '\n' +
'    var top_text = text_area.getElementsByClassName("top")[0];' + '\n' +
'    var bottom_text = text_area.getElementsByClassName("bottom")[0];' + '\n' +
'    var step_number = top_text.getElementsByTagName("span")[0];' + '\n' +
'    var step_title = top_text.getElementsByTagName("span")[1];' + '\n' +
'    var step_text = bottom_text.getElementsByTagName("span")[0];' + '\n' +
'    var timer, clock;' + '\n' +
'    var isPlaying = false;' + '\n' +
'' + '\n' +
'    function printInfo(args, cur_step) {' + '\n' +
'        step_number.innerHTML = "Step "+(cur_step+1);' + '\n' +
'        step_title.innerHTML = args[cur_step].title.length>64?args[cur_step].title.substring(0,64-3)+"...":args[cur_step].title;' + '\n' +
'        //step_text.innerHTML = args[cur_step].text.length>264?args[cur_step].text.substring(0,264-3)+"...":args[cur_step].text;' + '\n' +
'        step_text.innerHTML = args[cur_step].text;' + '\n' +
'    }' + '\n' +
'' + '\n' +
'    function selectOp(target) {' + '\n' +
'        playpause.removeEventListener(\'click\', playpauseClick);' + '\n' +
'        frwd.removeEventListener(\'click\', frwdClick);' + '\n' +
'        bkwrd.removeEventListener(\'click\', bkwrdClick);' + '\n' +
'        isPlaying = false;' + '\n' +
'        clearInterval(timer);' + '\n' +
'        clearInterval(clock);' + '\n' +
'        playpause.innerHTML = \'<i class="fa-solid fa-play"></i>\';' + '\n' +
'        currentTimeRef.innerHTML = timeFormatter((0/step)*(interval));' + '\n' +
'' + '\n' +
'        var anim;' + '\n' +
'        for(var i=0;i<anims_package.user.length;i++) {' + '\n' +
'            if(anims_package.user[i].fx == target.id) {' + '\n' +
'                anim = anims_package.user[i];' + '\n' +
'                break;' + '\n' +
'            }' + '\n' +
'        }' + '\n' +
'        //console.log(anim);' + '\n' +
'' + '\n' +
'        var steps_arr = anim.steps;' + '\n' +
'        var steps_length = steps_arr.length;' + '\n' +
'        var start = steps_arr[0].start;' + '\n' +
'        var end = steps_arr[steps_length-1].end;' + '\n' +
'' + '\n' +
'        frames = end - start;' + '\n' +
'        step = max / frames; // step = max / frames' + '\n' +
'        playbar.max = max;' + '\n' +
'        playbar.step = step;' + '\n' +
'        playbar.setAttribute("style",' + '\n' +
'            "background-image:"+' + '\n' +
'            "repeating-linear-gradient("+' + '\n' +
'                "to right, rgba(255, 255, 255, 0.2),"+' + '\n' +
'                "rgba(255, 255, 255, 0.2) calc("+step+"%), "+' + '\n' +
'                "#05051a "+step+"%"+' + '\n' +
'            ");"' + '\n' +
'        );' + '\n' +
'        ' + '\n' +
'        console.log("clicked operational tab");' + '\n' +
'        document.getElementsByClassName(\'text-area\')[0].style.display = "block";' + '\n' +
'        document.getElementById(\'playbar\').style.display = "block";' + '\n' +
'        document.getElementById(\'pre-cop-area\').style.display = "none";' + '\n' +
'        ' + '\n' +
'        /*' + '\n' +
'        if(cop_section.style.display == "block") {' + '\n' +
'            target.classList.remove(\'hilight\');' + '\n' +
'            console.log(\'puzzles.procedures["goToFrame"](animations.explode.start);\');' + '\n' +
'            //puzzles.procedures["goToFrame"](animations.explode.start);' + '\n' +
'            cop_section.style.display = "none";' + '\n' +
'' + '\n' +
'        } else {' + '\n' +
'            tabs = flex_block.getElementsByTagName("div");' + '\n' +
'            tabs[0].classList.remove(\'hilight\');' + '\n' +
'            if(tabs.length > 1) tabs[1].classList.remove(\'hilight\');' + '\n' +
'            if(tabs.length > 2) tabs[2].classList.remove(\'hilight\');' + '\n' +
'            target.classList.add(\'hilight\');' + '\n' +
'            console.log(\'puzzles.procedures["animMaterials"](objects);\');' + '\n' +
'            //puzzles.procedures["animMaterials"](objects);' + '\n' +
'            cop_section.style.display = "block";' + '\n' +
'            doPlay(steps_arr);' + '\n' +
'        }*/' + '\n' +
'        //console.log("search stack, args:",VARS["search_stack"],anim);' + '\n' +
'        puzzles.procedures["restoreMaterials"](true);' + '\n' +
'        ' + '\n' +
'        tabs = flex_block.getElementsByTagName("div");' + '\n' +
'        tabs[0].classList.remove(\'hilight\');' + '\n' +
'        if(tabs.length > 1) tabs[1].classList.remove(\'hilight\');' + '\n' +
'        if(tabs.length > 2) tabs[2].classList.remove(\'hilight\');' + '\n' +
'        target.classList.add(\'hilight\');' + '\n' +
'        ' + '\n' +
'        doPlay(steps_arr);' + '\n' +
'    }' + '\n' +
'' + '\n' +
'    for(var i=0;i<anims_package.user.length;i++) ' + '\n' +
'    {' + '\n' +
'        var elem = document.createElement("div");' + '\n' +
'        elem.id = anims_package.user[i].fx;' + '\n' +
'        elem.innerHTML = anims_package.user[i].fx.charAt(0).toUpperCase() + ' + '\n' +
'                anims_package.user[i].fx.slice(1);' + '\n' +
'' + '\n' +
'        elem.addEventListener("click",function(event){ selectOp(event.target) });' + '\n' +
'        ' + '\n' +
'        // tab divider is broken. just disable this for the moment.' + '\n' +
'        if(i > 1) {' + '\n' +
'            var tab_div = document.createElement("div");' + '\n' +
'            tab_div.classList.add("tab-divider");' + '\n' +
'            tab_div.innerHTML = "<span></span>";' + '\n' +
'            //flex_block.appendChild(tab_div);' + '\n' +
'        }' + '\n' +
'        flex_block.appendChild(elem);' + '\n' +
'        //console.log("adding tab",anims_package.user[i].fx);' + '\n' +
'    }' + '\n' +
'    selectOp(document.getElementById(anims_package.user[0].fx)); // autoselect first animation' + '\n' +
'    //VARS["anims_package"] = animations;' + '\n' +
'    VARS["system_start"] = anims_package.system.start;' + '\n' +
'' + '\n' +
'    function doPlay(args) {' + '\n' +
'        maxDuration.innerText = timeFormatter((max/step)*(interval));' + '\n' +
'        playbar.value = 0;' + '\n' +
'' + '\n' +
'        var status = parseInt(playbar.value);' + '\n' +
'' + '\n' +
'        var cur_step = 0;' + '\n' +
'        //var last_step = VARS["last_step"];' + '\n' +
'        //var last_step = setMaterials(cur_step, VARS["last_step"], "change materials and update last_step");' + '\n' +
'        var last_step = setMaterials(cur_step, -1, "change materials and update last_step");' + '\n' +
'        var cur_frame = args[0].start+((status/max)*frames);' + '\n' +
'        printInfo(args, cur_step);' + '\n' +
'' + '\n' +
'        isPlaying = false;' + '\n' +
'        playpauseClick = function () {' + '\n' +
'            if (!isPlaying) {' + '\n' +
'                ' + '\n' +
'                // Start up if Controls Panel got closed.' + '\n' +
'                if(parseInt(playbar.value) == 0) {' + '\n' +
'                    status = 0;' + '\n' +
'                    cur_frame = args[0].start+((status/max)*frames);' + '\n' +
'                    cur_step = 0;' + '\n' +
'                    printInfo(args, cur_step);' + '\n' +
'                }' + '\n' +
'                ' + '\n' +
'                isPlaying = !isPlaying;' + '\n' +
'                timer = setInterval(function(){' + '\n' +
'                    status = status>=max? 0:status+step;' + '\n' +
'                    cur_frame = args[0].start+((status/max)*frames);' + '\n' +
'                    ' + '\n' +
'                    var detectChange = cur_step;' + '\n' +
'' + '\n' +
'                    if(args[cur_step+1]!==undefined && cur_frame >= args[cur_step].end)     // go to next step' + '\n' +
'                        cur_step++;' + '\n' +
'                    else if(args[cur_step-1]!==undefined && cur_frame < args[cur_step].start) // go to previous step' + '\n' +
'                        cur_step--;' + '\n' +
'                    ' + '\n' +
'                    VARS["cur_step"] = cur_step;' + '\n' +
'                    printInfo(args, detectChange);' + '\n' +
'' + '\n' +
'                    //console.log("play/pause: go to frame:",cur_frame);' + '\n' +
'                    puzzles.procedures["goToFrame"](cur_frame);' + '\n' +
'                    last_step = setMaterials(cur_step, last_step, "change materials and update last_step");' + '\n' +
'                    ' + '\n' +
'                    if(VARS["playInterrupt"]) {' + '\n' +
'                        status = 0;' + '\n' +
'                        cur_step = 0;' + '\n' +
'                        cur_frame = VARS["system_start"];' + '\n' +
'                        currentTimeRef.innerHTML = timeFormatter(0);' + '\n' +
'                        console.log("interrupting play");' + '\n' +
'                        //last_step = setMaterials(cur_step, last_step, "change materials and update last_step");' + '\n' +
'                        last_step = 0;' + '\n' +
'                        puzzles.procedures["goToFrame"](cur_frame);' + '\n' +
'                    }' + '\n' +
'                    ' + '\n' +
'                    if(status >= max) {' + '\n' +
'                        status = playbar.max;' + '\n' +
'                        //playbar.value = playbar.max;' + '\n' +
'                        last_step = 0;' + '\n' +
'                        //cur_step = 0;' + '\n' +
'                    }' + '\n' +
'                    ' + '\n' +
'                    if(status >= max || VARS["playInterrupt"]) {' + '\n' +
'                        //console.log("interrupting play2");' + '\n' +
'                        isPlaying = false;' + '\n' +
'                        printInfo(args, cur_step);' + '\n' +
'                        clearInterval(timer);' + '\n' +
'                        clearInterval(clock);' + '\n' +
'                        playpause.innerHTML = \'<i class="fa-solid fa-play"></i>\';' + '\n' +
'                    }' + '\n' +
'                    ' + '\n' +
'                    playbar.value = status;' + '\n' +
'                    ' + '\n' +
'                    // STOP ANIMATION AT EACH STEP' + '\n' +
'                    if(cur_step != detectChange) {' + '\n' +
'                        if(playbar.value == 0) printInfo(args, 0);' + '\n' +
'                        clearInterval(timer);' + '\n' +
'                        clearInterval(clock);' + '\n' +
'                        isPlaying = !isPlaying;' + '\n' +
'                        playpause.innerHTML = \'<i class="fa-solid fa-play"></i>\';' + '\n' +
'                        console.log("stopping animation at step change", cur_step);' + '\n' +
'                    }' + '\n' +
'                },interval)' + '\n' +
'                clock = setInterval(() => {' + '\n' +
'                    currentTimeRef.innerHTML = timeFormatter((status/step)*(interval));' + '\n' +
'                    maxDuration.innerText = timeFormatter((max/step)*(interval));' + '\n' +
'                }, 1);' + '\n' +
'' + '\n' +
'                playpause.innerHTML = \'<i class="fa-solid fa-pause"></i>\';' + '\n' +
'            } else {' + '\n' +
'                isPlaying = !isPlaying;' + '\n' +
'                clearInterval(timer);' + '\n' +
'                clearInterval(clock);' + '\n' +
'                //cur_step = 0;' + '\n' +
'                playpause.innerHTML = \'<i class="fa-solid fa-play"></i>\';' + '\n' +
'            }' + '\n' +
'        };' + '\n' +
'        playpause.addEventListener("click", playpauseClick);' + '\n' +
'' + '\n' +
'        frwdClick = function () {' + '\n' +
'            cur_step = cur_step+1>=args.length?0:cur_step+1;' + '\n' +
'            status = args[cur_step].start / (args[args.length-1].end - args[0].start);' + '\n' +
'            status*=max;' + '\n' +
'            ' + '\n' +
'            cur_frame = args[0].start+((status/max)*frames);' + '\n' +
'            puzzles.procedures["goToFrame"](cur_frame);' + '\n' +
'            last_step = setMaterials(cur_step, last_step, "change materials and update last_step");' + '\n' +
'                    ' + '\n' +
'            printInfo(args, cur_step);' + '\n' +
'            playbar.value = status;' + '\n' +
'            currentTimeRef.innerHTML = timeFormatter((status/step)*(interval));' + '\n' +
'            maxDuration.innerText = timeFormatter((max/step)*(interval));' + '\n' +
'        };' + '\n' +
'        frwd.addEventListener("click", frwdClick);' + '\n' +
'        ' + '\n' +
'        // theres a problem here when you go forward a few frames then try to step backwards' + '\n' +
'        bkwrdClick = function () {' + '\n' +
'            if(Math.ceil(cur_frame) == args[cur_step].start)' + '\n' +
'                cur_step = cur_step-1<0?args.length-1:cur_step-1;' + '\n' +
'            ' + '\n' +
'            status = args[cur_step].start / (args[args.length-1].end - args[0].start);' + '\n' +
'            status*=max;' + '\n' +
'            ' + '\n' +
'            cur_frame = args[0].start+((status/max)*frames);' + '\n' +
'            puzzles.procedures["goToFrame"](cur_frame);' + '\n' +
'            last_step = setMaterials(cur_step, last_step, "change materials and update last_step");' + '\n' +
'             ' + '\n' +
'            VARS["cur_step"] = cur_step;' + '\n' +
'            printInfo(args, cur_step);' + '\n' +
'            playbar.value = status;' + '\n' +
'            currentTimeRef.innerHTML = timeFormatter((status/step)*(interval));' + '\n' +
'            maxDuration.innerText = timeFormatter((max/step)*(interval));' + '\n' +
'        }' + '\n' +
'        bkwrd.addEventListener("click", bkwrdClick);' + '\n' +
'' + '\n' +
'        playbar.oninput = function() {' + '\n' +
'            status = parseInt(playbar.value);' + '\n' +
'            cur_frame = args[0].start+((status/max)*frames);' + '\n' +
'' + '\n' +
'            for(var j=0;j<args.length;j++) {' + '\n' +
'                if(args[j]!==undefined && cur_frame >= args[j].start && cur_frame <= args[j].end) {' + '\n' +
'                    cur_step = j;' + '\n' +
'                    VARS["cur_step"] = cur_step;' + '\n' +
'                    break;' + '\n' +
'                }' + '\n' +
'            }' + '\n' +
'            last_step = setMaterials(cur_step, last_step, "change materials and update last_step");' + '\n' +
'            ' + '\n' +
'            printInfo(args, cur_step);' + '\n' +
'            isPlaying = false;' + '\n' +
'            clearInterval(timer);' + '\n' +
'            clearInterval(clock);' + '\n' +
'            playpause.innerHTML = \'<i class="fa-solid fa-play"></i>\';' + '\n' +
'' + '\n' +
'            //console.log("playbar.oninput: go to frame:",cur_frame);' + '\n' +
'            puzzles.procedures["goToFrame"](cur_frame);' + '\n' +
'            currentTimeRef.innerHTML = timeFormatter((status/step)*(interval));' + '\n' +
'            maxDuration.innerText = timeFormatter((max/step)*(interval));' + '\n' +
'        };' + '\n' +
'        ' + '\n' +
'        function setMaterials(cur, last, msg) {' + '\n' +
'            if(cur != last) {' + '\n' +
'                if(args[last] === undefined) last = cur;' + '\n' +
'                ' + '\n' +
'                currentTimeRef.innerHTML = timeFormatter((status/step)*(interval));' + '\n' +
'                //console.log(msg,args[cur], cur, last, args[cur].alpha, args[last].alpha);' + '\n' +
'                console.log(msg);' + '\n' +
'                // if the alpha and focus for cur and last are empty, then don\'t update' + '\n' +
'                if(' + '\n' +
'                    !(args[cur].alpha.length==0 && args[last].alpha.length==0 &&' + '\n' +
'                      args[cur].focus.length==0 && args[last].focus.length==0)' + '\n' +
'                ) {' + '\n' +
'                   puzzles.procedures["restoreMaterials"](); ' + '\n' +
'                }' + '\n' +
'                if(args[cur].alpha.length > 0 ) puzzles.procedures["alphaMaterials"](args[cur].alpha);' + '\n' +
'                if(args[cur].focus.length > 0 ) puzzles.procedures["focusMaterials"](args[cur].focus);' + '\n' +
'                ' + '\n' +
'                if(document.getElementById("cop-section").style.display == "block" && VARS["object_lock"] == false) {' + '\n' +
'                    //console.log(">> select component set");' + '\n' +
'                    let dupe_obj = VARS["objects_list"];' + '\n' +
'                    let dupe_alpha = args[cur].alpha;' + '\n' +
'                    var mats_length = Object.keys(v3d.materials).length;' + '\n' +
'                    let temp = [];' + '\n' +
'                    //console.log(dupe_alpha);' + '\n' +
'                    for(var i=0;i<dupe_obj.length;i++) {' + '\n' +
'                        var dupe_id = dupe_obj[i].split("_")[0];' + '\n' +
'                        temp.push({' + '\n' +
'                            "id": dupe_id,' + '\n' +
'                            "name": dupe_obj[i]' + '\n' +
'                        });' + '\n' +
'                        var dupe_elem = document.getElementById("id-" + dupe_id);' + '\n' +
'                        if(dupe_elem != null) {' + '\n' +
'                            document.getElementById("focused").classList.remove("hilight");' + '\n' +
'                            document.getElementById("isolated").classList.remove("hilight");' + '\n' +
'                            document.getElementById("isolated").classList.add("hilight");' + '\n' +
'                            ' + '\n' +
'                            VARS["isFocused"] = false;' + '\n' +
'                            VARS["isIsolated"] = true;' + '\n' +
'                            ' + '\n' +
'                            dupe_elem.classList.add("hilight");' + '\n' +
'                        }' + '\n' +
'                        ' + '\n' +
'                        for(var j=0;j<dupe_alpha.length;j++) {' + '\n' +
'                            if(dupe_alpha[j] == dupe_obj[i]) {' + '\n' +
'                                temp.splice(temp.length-1,1);' + '\n' +
'                                dupe_elem.classList.remove("hilight");' + '\n' +
'                                break;' + '\n' +
'                            }' + '\n' +
'                        }' + '\n' +
'                    }' + '\n' +
'                    temp.splice(temp.length-mats_length,mats_length);' + '\n' +
'                    ' + '\n' +
'                    //VARS["args"] = args;' + '\n' +
'                    VARS["search_stack"] = temp;' + '\n' +
'                    console.log(temp);' + '\n' +
'                }' + '\n' +
'                ' + '\n' +
'                VARS["last_step"] = last;' + '\n' +
'                return cur;' + '\n' +
'            }' + '\n' +
'            return last;' + '\n' +
'        }' + '\n' +
'    }' + '\n' +
'}')))(appInstance, v3d, PL, VARS, PROC);


operateAnimation('PLAY', getAnimations(objects_list), system_start, system_start, 'LoopOnce', 100,
        function() {}, false);

    registerSetTimeout(0.5, function() {
  resetCamera();
});

setHTMLElemStyle('display', 'block', 'left-panel', false);
eventHTMLElem('click', 'reset', false, function(event) {
  resetCamera();
});
eventHTMLElem('click', 'annotations-button', false, function(event) {
  if (!hideAnnotations) {
    hideAnnotations2();
  } else {
    hideAnnotations = false;

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('document.getElementById("annotations-button").classList.add(\'hilight\');' + '\n' +
    '' + '\n' +
    'var ann = document.getElementsByClassName("v3d-annotation");' + '\n' +
    'for(var i=0;i<ann.length;i++) {' + '\n' +
    '    ann[i].classList.remove(\'hide\');' + '\n' +
    '}')))(appInstance, v3d, PL, VARS, PROC);

  }
  console.log('handling annotations');
});
eventHTMLElem('click', 'expand-button', false, function(event) {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'VARS["isExpandEnabled"] = !document.getElementById("expand-button").classList.contains("disabled");')(appInstance, v3d, PL, VARS, PROC);

  if (isExpandEnabled == true) {
    start = 0;
    end = 0;

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('VARS["start"] = VARS["anims_package"].system.start;' + '\n' +
    'VARS["end"] = VARS["anims_package"].system.end;' + '\n' +
    '//console.log("start",VARS["start"],"end",VARS["end"]);')))(appInstance, v3d, PL, VARS, PROC);

    if (isExpanded == false && isAnimating == false) {
      isAnimating = true;

      Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'document.getElementById("expand-button").classList.add(\'hilight\');')(appInstance, v3d, PL, VARS, PROC);


      operateAnimation('PLAY', getAnimations(model), start, end, 'LoopOnce', anim_speed,
              function() {
        isAnimating2(true);
      }, false);

          console.log('play animation forward');
    } else if (isExpanded == true && isAnimating == false) {
      isAnimating = true;

      Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', 'document.getElementById("expand-button").classList.remove(\'hilight\');')(appInstance, v3d, PL, VARS, PROC);


      operateAnimation('PLAY', getAnimations(model), start, end, 'LoopOnce', anim_speed,
              function() {
        isAnimating2(false);
      }, true);

          console.log('play animation in reverse');
    }
  }
});
eventHTMLElem('click', 'focused', false, function(event) {
  isAnimating = true;
  if (isFocused) {
    isFocused = false;
    console.log('focused was on, now is default display');

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('document.getElementById("focused").classList.remove(\'hilight\');' + '\n' +
    'document.getElementById("isolated").classList.remove(\'hilight\');')))(appInstance, v3d, PL, VARS, PROC);

    if (search_stack.length == 0) {
      outline(['ALL_OBJECTS'], 'DISABLE');
    }
    for (var k_index3 in search_stack) {
      let k = search_stack[k_index3];
      outline(getEntityByName(dictGet(k, 'name'), 'OBJECT'), 'ENABLE');
    }
    resetMaterials(false);
    changeVis(model, true);
  } else if (isIsolated) {
    isIsolated = false;
    isFocused = true;
    console.log('isolated was on, now switching to focused');

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('document.getElementById("focused").classList.add(\'hilight\');' + '\n' +
    'document.getElementById("isolated").classList.remove(\'hilight\');')))(appInstance, v3d, PL, VARS, PROC);

    showMultiple();
  } else {
    isFocused = true;
    console.log('was default display, now focused is on');

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('document.getElementById("focused").classList.add(\'hilight\');' + '\n' +
    'document.getElementById("isolated").classList.remove(\'hilight\');')))(appInstance, v3d, PL, VARS, PROC);

    showMultiple();
  }
  registerSetTimeout(0.5, function() {
    isAnimating = false;
  });
});
eventHTMLElem('click', 'isolated', false, function(event) {
  isAnimating = true;
  if (isIsolated) {
    isIsolated = false;
    console.log('isolated was on, now is default display');

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('document.getElementById("focused").classList.remove(\'hilight\');' + '\n' +
    'document.getElementById("isolated").classList.remove(\'hilight\');')))(appInstance, v3d, PL, VARS, PROC);

    if (search_stack.length == 0) {
      outline(['ALL_OBJECTS'], 'DISABLE');
    }
    for (var k_index4 in search_stack) {
      let k = search_stack[k_index4];
      outline(getEntityByName(dictGet(k, 'name'), 'OBJECT'), 'ENABLE');
    }
    resetMaterials(false);
    changeVis(model, true);
  } else if (isFocused) {
    isFocused = false;
    isIsolated = true;
    console.log('focused was on, now switching to isolated');

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('document.getElementById("focused").classList.remove(\'hilight\');' + '\n' +
    'document.getElementById("isolated").classList.add(\'hilight\');')))(appInstance, v3d, PL, VARS, PROC);

    showMultiple();
  } else {
    isIsolated = true;
    console.log('was default display, now isolated is on');

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('document.getElementById("focused").classList.remove(\'hilight\');' + '\n' +
    'document.getElementById("isolated").classList.add(\'hilight\');')))(appInstance, v3d, PL, VARS, PROC);

    showMultiple();
  }
  registerSetTimeout(0.5, function() {
    isAnimating = false;
  });
});
eventHTMLElem('click', 'comp-button', false, function(event) {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('document.getElementById("object-lock").classList.remove("locked");' + '\n' +
  'VARS["object_lock"] = false;')))(appInstance, v3d, PL, VARS, PROC);

  restoreModel();
  resetCamera();
});
handleNav();
eventHTMLElem('click', 'cop-button', false, function(event) {
  isAnimating = true;

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('var cop = document.getElementById("cop-section");' + '\n' +
  'var copIsHidden = cop.style.display=="none"?true:false;' + '\n' +
  '' + '\n' +
  'if(copIsHidden) { // open panel' + '\n' +
  '    document.getElementById("cop-button").classList.add(\'hilight\');' + '\n' +
  '    document.getElementById("expand-button").classList.add(\'disabled\');' + '\n' +
  '    document.getElementById("expand-button").classList.remove(\'hilight\');' + '\n' +
  '    cop.style.display = "block";' + '\n' +
  '    document.getElementById("playbar").getElementsByTagName("input")[0].value = 0;' + '\n' +
  '    VARS["playInterrupt"] = false;' + '\n' +
  '    //puzzles.procedures["restoreMaterials"](true);' + '\n' +
  '    ' + '\n' +
  '    // reset the time on opening the panel. bodge fix, but saves time. SORRY! (ahaha)' + '\n' +
  '    document.getElementById("current-time").innerHTML = "00:00";' + '\n' +
  '}' + '\n' +
  'else { // close panel' + '\n' +
  '    document.getElementById("cop-button").classList.remove(\'hilight\');' + '\n' +
  '    document.getElementById("expand-button").classList.remove(\'disabled\');' + '\n' +
  '    cop.style.display = "none";' + '\n' +
  '    VARS["playInterrupt"] = true;' + '\n' +
  '    //puzzles.procedures["restoreMaterials"](true);' + '\n' +
  '    VARS["isIsolated"] = false;' + '\n' +
  '    VARS["isFocused"] = true;' + '\n' +
  '    document.getElementById("isolated").classList.remove(\'hilight\');' + '\n' +
  '    document.getElementById("focused").classList.add(\'hilight\');' + '\n' +
  '    puzzles.procedures["restoreModel"]()' + '\n' +
  '    document.getElementById("object-lock").classList.remove("locked");' + '\n' +
  '    var tabs = document.getElementsByClassName("step-tabs")[0].getElementsByTagName("div");' + '\n' +
  '    for(var i=0;i<tabs.length;i++) {' + '\n' +
  '        tabs[i].classList.remove(\'hilight\');' + '\n' +
  '    }' + '\n' +
  '    document.getElementsByClassName("text-area")[0].style.display = "none";' + '\n' +
  '    document.getElementById("playbar").style.display = "none";' + '\n' +
  '    document.getElementById("pre-cop-area").style.display = "block";' + '\n' +
  '}' + '\n' +
  'VARS["isExpanded"] = false;' + '\n' +
  '//puzzles.procedures["restoreMaterials"](true);' + '\n' +
  '//puzzles.procedures["resetCamera"]();')))(appInstance, v3d, PL, VARS, PROC);

  registerSetTimeout(0.5, function() {
    isAnimating = false;
  });
});
eventHTMLElem('click', 'close-cop', false, function(event) {
  isAnimating = true;

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('var cop = document.getElementById("cop-section");' + '\n' +
  'document.getElementById("cop-button").classList.remove(\'hilight\');' + '\n' +
  'document.getElementById("expand-button").classList.remove(\'disabled\');' + '\n' +
  'cop.style.display = "none";' + '\n' +
  'VARS["playInterrupt"] = true;' + '\n' +
  'VARS["isExpanded"] = false;' + '\n' +
  '//puzzles.procedures["restoreMaterials"](true);' + '\n' +
  '//puzzles.procedures["resetCamera"]();' + '\n' +
  'VARS["isIsolated"] = false;' + '\n' +
  'VARS["isFocused"] = true;' + '\n' +
  'document.getElementById("isolated").classList.remove(\'hilight\');' + '\n' +
  'document.getElementById("focused").classList.add(\'hilight\');' + '\n' +
  'puzzles.procedures["restoreModel"]()' + '\n' +
  'document.getElementById("object-lock").classList.remove("locked");' + '\n' +
  '    var tabs = document.getElementsByClassName("step-tabs")[0].getElementsByTagName("div");' + '\n' +
  '    for(var i=0;i<tabs.length;i++) {' + '\n' +
  '        tabs[i].classList.remove(\'hilight\');' + '\n' +
  '    }' + '\n' +
  'document.getElementsByClassName("text-area")[0].style.display = "none";' + '\n' +
  'document.getElementById("playbar").style.display = "none";' + '\n' +
  'document.getElementById("pre-cop-area").style.display = "block";')))(appInstance, v3d, PL, VARS, PROC);

  registerSetTimeout(0.5, function() {
    isAnimating = false;
  });
});
eventHTMLElem('click', 'object-lock', false, function(event) {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('var lock = document.getElementById("object-lock");' + '\n' +
  'var isLocked = lock.classList.contains("locked");' + '\n' +
  '' + '\n' +
  'if(isLocked) {' + '\n' +
  '    lock.classList.remove("locked");' + '\n' +
  '    VARS["object_lock"] = false;' + '\n' +
  '} else {' + '\n' +
  '    lock.classList.add("locked");' + '\n' +
  '    VARS["object_lock"] = true;' + '\n' +
  '}' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

});
eventHTMLElem('click', 'slide-open', false, function(event) {
  menuVisible = getHTMLElemStyle('display', 'table-body', false) != 'none';
  if (menuVisible) {
    menuVisible = false;
    setHTMLElemStyle('display', 'none', 'header', false);
    setHTMLElemStyle('display', 'none', 'table-body', false);
    setHTMLElemStyle('bottom', '-5px', 'flex-block', false);
    setHTMLElemStyle('top', '0', 'v3d-container', false);
    console.log('close table');

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('document.getElementById("slide-open").classList.add(\'closed\');' + '\n' +
    'document.getElementById("cop-section").classList.remove(\'bump\');' + '\n' +
    'var arrow = document.getElementsByClassName("arrow")[0];' + '\n' +
    'arrow.style.bottom = "0";' + '\n' +
    'arrow.getElementsByClassName("vertical")[0].style.transform = "rotate(0deg)";' + '\n' +
    'arrow.getElementsByClassName("horizontal")[0].style.transform = "rotate(180deg)";' + '\n' +
    '' + '\n' +
    'if(document.body.clientWidth <= 667)' + '\n' +
    '    document.getElementById("v3d-container").style.top = 0;' + '\n' +
    'else if(document.body.clientWidth <= 1080)' + '\n' +
    '    document.getElementById("v3d-container").style.left = 0;')))(appInstance, v3d, PL, VARS, PROC);

  } else {
    menuVisible = true;
    setHTMLElemStyle('display', 'block', 'header', false);
    setHTMLElemStyle('display', 'block', 'table-body', false);
    setHTMLElemStyle('bottom', '295px', 'flex-block', false);
    console.log('open table');

    Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('document.getElementById("slide-open").classList.remove(\'closed\');' + '\n' +
    'document.getElementById("cop-section").classList.add(\'bump\');' + '\n' +
    'var arrow = document.getElementsByClassName("arrow")[0];' + '\n' +
    'arrow.style.bottom = "300px";' + '\n' +
    'arrow.getElementsByClassName("vertical")[0].style.transform = "rotate(180deg)";' + '\n' +
    'arrow.getElementsByClassName("horizontal")[0].style.transform = "rotate(0deg)";' + '\n' +
    '' + '\n' +
    'if(document.body.clientWidth <= 667)' + '\n' +
    '    document.getElementById("v3d-container").style.top = "-140px";' + '\n' +
    'else if(document.body.clientWidth <= 1080)' + '\n' +
    '    document.getElementById("v3d-container").style.left = "-18%";')))(appInstance, v3d, PL, VARS, PROC);

  }
});

Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('// blur event for mobile menu' + '\n' +
'window.addEventListener("click",function(event){' + '\n' +
'    var mobile_menu = document.getElementById("mobile-menu");' + '\n' +
'    var line = document.getElementById("menu-btn")' + '\n' +
'                       .getElementsByTagName("div");' + '\n' +
'    var isLine = (event.target == line[0] || event.target == line[1] ||' + '\n' +
'                  event.target == line[2] || event.target == line[3])? ' + '\n' +
'                  true:false;' + '\n' +
'    var isOpen = mobile_menu.style.display == "block"' + '\n' +
'    var id = event.target.id;' + '\n' +
'    ' + '\n' +
'    if(!isOpen && (id == "menu-btn" || isLine)) {' + '\n' +
'        mobile_menu.style.display = "block";' + '\n' +
'        ' + '\n' +
'    } else if(isOpen && (id == "menu-btn" || isLine)) {' + '\n' +
'        mobile_menu.style.display = "none";' + '\n' +
'        ' + '\n' +
'    } else if(isOpen && id == "mobile-menu") {' + '\n' +
'        mobile_menu.style.display = "block";' + '\n' +
'        ' + '\n' +
'    } else if(isOpen &&' + '\n' +
'       (id != "about-btn2" || ' + '\n' +
'        id != "controls-btn2" || ' + '\n' +
'        id != "links-btn2")) ' + '\n' +
'    {' + '\n' +
'        mobile_menu.style.display = "none";' + '\n' +
'    }' + '\n' +
'});')))(appInstance, v3d, PL, VARS, PROC);


eventHTMLElem('keydown', 'search-box', false, function(event) {
  registerRemoveTimer('searchTimer');
  registerSetTimer('searchTimer', 0.35, function() {
    registerRemoveTimer('searchTimer');
    doSearch();
  }, Infinity);
});
eventHTMLElem('click', 'search', false, function(event) {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('/*var pos = window.scrollY;' + '\n' +
  '' + '\n' +
  'console.log("old height",VARS["initialHeight"]);' + '\n' +
  'console.log("new height",pos);' + '\n' +
  '' + '\n' +
  'document.getElementById("bump").innerHTML = ""+' + '\n' +
  'VARS["initialHeight"]+", "+' + '\n' +
  'pos+", "+' + '\n' +
  'document.documentElement.style.bottom+", "+' + '\n' +
  'document.body.style.bottom+' + '\n' +
  '"";*/' + '\n' +
  '' + '\n' +
  '// this works-ish' + '\n' +
  '//document.documentElement.style.bottom = -pos+"px";' + '\n' +
  '' + '\n' +
  'document.documentElement.scrollTop = 0;')))(appInstance, v3d, PL, VARS, PROC);

  doSearch();
});
eventHTMLElem('click', 'clear', false, function(event) {
  setHTMLElemAttribute('value', '', 'search-box', false);
  doSearch();
});


Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('var lightbox = document.getElementById("lightbox");' + '\n' +
'lightbox.style.display = "none";' + '\n' +
'//lightbox.getElementsByTagName("iframe")[0].style.display = "none";' + '\n' +
'lightbox.getElementsByTagName("video")[0].style.display = "none";' + '\n' +
'' + '\n' +
'var videos = [' + '\n' +
'    document.getElementById("video-1"),' + '\n' +
'    document.getElementById("video-2"),' + '\n' +
'    document.getElementById("video-3"),' + '\n' +
'    document.getElementById("video-4"),' + '\n' +
'    document.getElementById("video-5"),' + '\n' +
'    document.getElementById("video-6"),' + '\n' +
'    document.getElementById("video-7"),' + '\n' +
'    document.getElementById("video-8"),' + '\n' +
'    document.getElementById("video-9"),' + '\n' +
'    document.getElementById("video-10"),' + '\n' +
'    document.getElementById("video-11"),' + '\n' +
'    document.getElementById("video-12")' + '\n' +
'];' + '\n' +
'var video_path = [' + '\n' +
'    "f1",' + '\n' +
'    "f2",' + '\n' +
'    "f3",' + '\n' +
'    "f4",' + '\n' +
'    "f5",' + '\n' +
'    "f6",' + '\n' +
'    "f7",' + '\n' +
'    "f8",' + '\n' +
'    "sc1",' + '\n' +
'    "sc2",' + '\n' +
'    "sc3",' + '\n' +
'    "sc4"' + '\n' +
'];' + '\n' +
'' + '\n' +
'var i;var iframe;' + '\n' +
'for(i=0;i<videos.length;i++) {' + '\n' +
'    iframe = document.createElement("video");' + '\n' +
'    ' + '\n' +
'    //iframe.frameBorder = "0px";' + '\n' +
'    iframe.style.border = "none";' + '\n' +
'    //iframe.allow = "accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share";' + '\n' +
'    //iframe.referrerpolicy = "strict-origin-when-cross-origin";' + '\n' +
'    //iframe.allowfullscreen = true;' + '\n' +
'    iframe.style.display = "none";' + '\n' +
'    iframe.setAttribute(\'controls\', \'\');' + '\n' +
'    ' + '\n' +
'    iframe.src = "videos/"+video_path[i]+".mp4";' + '\n' +
'    ' + '\n' +
'    lightbox.getElementsByTagName("div")[0].appendChild(iframe);' + '\n' +
'    ' + '\n' +
'    videos[i].addEventListener("click",function(e) {' + '\n' +
'        var new_height = window.screen.height - 50 - 96;' + '\n' +
'        //var new_width = window.screen.width - document.getElementById("header").clientWidth;' + '\n' +
'        var new_width = window.screen.width - 1010;' + '\n' +
'        ' + '\n' +
'        var lightbox = document.getElementById("lightbox");' + '\n' +
'        var index = parseInt(e.target.id.replace("video-",""));' + '\n' +
'        var j;' + '\n' +
'        for(j=0;j<lightbox.getElementsByTagName("video").length;j++)' + '\n' +
'            lightbox.getElementsByTagName("video")[j].style.display = "none";' + '\n' +
'        ' + '\n' +
'        var cur_frame = lightbox.getElementsByTagName("video")[index];' + '\n' +
'        //cur_frame.height = cur_frame.contentWindow.document.body.scrollHeight + \'px\';' + '\n' +
'        //cur_frame.width = cur_frame.contentWindow.document.body.scrollWidth + \'px\';' + '\n' +
'        //cur_frame.height = new_height;' + '\n' +
'        cur_frame.width = new_width;' + '\n' +
'        cur_frame.height = 500;' + '\n' +
'        //cur_frame.width = 910;' + '\n' +
'        lightbox.getElementsByTagName("video")[index].style.display = "block";' + '\n' +
'        lightbox.style.display = "block";' + '\n' +
'        console.log("open lightbox with",video_path[index]+".mp4");' + '\n' +
'    });' + '\n' +
'}')))(appInstance, v3d, PL, VARS, PROC);

eventHTMLElem('click', 'lightbox-close-btn', false, function(event) {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('var lightbox = document.getElementById("lightbox");' + '\n' +
  'lightbox.style.display = "none";')))(appInstance, v3d, PL, VARS, PROC);

});

Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('var audio = new Audio(\'Maintaining_M18.mp3\');' + '\n' +
'' + '\n' +
'function playAndStopAtTimestamp(startTime, stopTime) {' + '\n' +
'  audio.currentTime = startTime;' + '\n' +
'  audio.play();' + '\n' +
'  ' + '\n' +
'  /*audio.addEventListener(\'timeupdate\', function() {' + '\n' +
'    if (audio.currentTime >= stopTime) {' + '\n' +
'      audio.pause();' + '\n' +
'    }' + '\n' +
'  });*/' + '\n' +
'}' + '\n' +
'' + '\n' +
'// Usage' + '\n' +
'var audioButton = document.getElementById("audio-attachment").addEventListener("click", function(){' + '\n' +
'    playAndStopAtTimestamp(15,30); // Stops at 5 seconds' + '\n' +
'});' + '\n' +
'' + '\n' +
'//console.log("looking for demo button", document.getElementById("COP-1"));' + '\n' +
'        ' + '\n' +
'var bkwrd = document.getElementById("skipminus-10");' + '\n' +
'var play = document.getElementById("play-pause");' + '\n' +
'var fwrd = document.getElementById("skip-10");' + '\n' +
'var playbar = document.getElementById("playbar").getElementsByTagName("input")[0];' + '\n' +
'var startTime = 45;' + '\n' +
'var endTime = 55;' + '\n' +
'var duration = endTime - startTime;' + '\n' +
'' + '\n' +
'play.addEventListener("click",function(){' + '\n' +
'    //var step_number = document.getElementsByClassName("top")[1].step;' + '\n' +
'    var step_number = VARS["cur_step"];' + '\n' +
'    ' + '\n' +
'    if(document.getElementById("COP-1").classList.contains(\'hilight\')) {' + '\n' +
'        if(play.getElementsByClassName("fa-play").length > 0) {' + '\n' +
'            var stepId = parseInt(step_number);' + '\n' +
'            console.log("Step Number is",stepId);' + '\n' +
'            ' + '\n' +
'            audio.pause();' + '\n' +
'            audio = new Audio(\'audio/\'+stepId+\'_.mp3\');' + '\n' +
'            audio.play();' + '\n' +
'        } else {' + '\n' +
'            audio.pause();' + '\n' +
'        }' + '\n' +
'    }' + '\n' +
'});' + '\n' +
'' + '\n' +
'/*' + '\n' +
'play.addEventListener("click",function(){' + '\n' +
'    console.log("clicked play button");' + '\n' +
'    if(document.getElementById("COP-1").classList.contains(\'hilight\')) {' + '\n' +
'        var stepId = parseInt(step_number.innerHTML.replace("Step ","")) -1;' + '\n' +
'        console.log("Step Number is",stepId);' + '\n' +
'        ' + '\n' +
'        audio.pause();' + '\n' +
'        audio = new Audio(\'audio/\'+stepId+\'_.mp3\');' + '\n' +
'        ' + '\n' +
'        // playing' + '\n' +
'        if(play.getElementsByClassName("fa-play").length > 0) {' + '\n' +
'            var progress = playbar.value / playbar.max;' + '\n' +
'            progress = (parseInt(progress) == 1)? 0: progress;' + '\n' +
'            ' + '\n' +
'            var continueTime = (duration * progress) + startTime;' + '\n' +
'            playAndStopAtTimestamp(continueTime,endTime);' + '\n' +
'            ' + '\n' +
'            console.log("audio playing (pressed play)", continueTime);' + '\n' +
'            ' + '\n' +
'            var checkForEnd = setInterval(function(){' + '\n' +
'                if(play.getElementsByClassName("fa-play").length > 0) {' + '\n' +
'                    audio.pause();' + '\n' +
'                    ' + '\n' +
'                    console.log("pausing audio (ran out of time)");' + '\n' +
'                    ' + '\n' +
'                    clearInterval(checkForEnd);' + '\n' +
'                }' + '\n' +
'            },10);' + '\n' +
'            ' + '\n' +
'        // paused' + '\n' +
'        } else {' + '\n' +
'            audio.pause();' + '\n' +
'            ' + '\n' +
'            console.log("pausing audio (pressed pause)");' + '\n' +
'        }' + '\n' +
'    }' + '\n' +
'});' + '\n' +
'*/')))(appInstance, v3d, PL, VARS, PROC);



} // end of PL.init function

PL.disposeListeners = function() {
    if (_pGlob) {
        _pGlob.eventListeners.forEach(({ target, type, listener, optionsOrUseCapture }) => {
            target.removeEventListener(type, listener, optionsOrUseCapture);
        });
        _pGlob.eventListeners.length = 0;
    }
}

PL.disposeHTMLElements = function() {
    if (_pGlob) {
        _pGlob.htmlElements.forEach(elem => {
            elem.remove();
        });
        _pGlob.htmlElements.clear();
    }
}

PL.disposeMaterialsCache = function() {
    if (_pGlob) {
        for (const mat of _pGlob.materialsCache.values()) {
            mat.dispose();
        }
        _pGlob.materialsCache.clear();
    }
}

PL.dispose = function() {
    PL.disposeListeners();
    PL.disposeHTMLElements();
    PL.disposeMaterialsCache();
    _pGlob = null;
    // backward compatibility
    if (v3d[Symbol.toStringTag] !== 'Module') {
        delete v3d.PL;
        delete v3d.puzzles;
    }
}



return PL;

}

export { createPL };
